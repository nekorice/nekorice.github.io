{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","path":"images/icon-reorder@2x.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1493622303000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1493622303000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1493622303000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1493622303000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1493622303000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1493622303000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1493622290000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1493622303000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1493622303000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1493622303000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1493622303000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493622303000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493622303000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493622303000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1493622303000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1493622303000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1493622303000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1493622303000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1493622303000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1493622303000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1493622303000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1493622303000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1493622303000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1493622303000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1493622303000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1493622303000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1493622303000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1493622303000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1493622303000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1493622303000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1493622303000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1493622303000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1493622303000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1493622303000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1493622303000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1493622303000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1493622303000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1493622303000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1493622303000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1493622303000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1493622303000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1493622303000},{"_id":"themes/apollo/README.md","hash":"597ba983d12898c84fa48031b20d58a21eb8d9f6","modified":1493623067000},{"_id":"themes/apollo/_config.yml","hash":"9df87b558f1ba6aca262d269e487fed9f9f1f0a2","modified":1493623067000},{"_id":"source/_posts/angluar-form.md","hash":"d2fefdd292d1862f61b19265ab9c4f5259578024","modified":1493622995000},{"_id":"source/_posts/angular-direct.md","hash":"bd0422b4ca6d671143460a60604d2a73c2642ce5","modified":1493623141000},{"_id":"source/_posts/angular-directive.md","hash":"e346384c3709b1d2e5a8101e1c6b189af4b44472","modified":1493622995000},{"_id":"source/_posts/angular-main.md","hash":"1937178eb5eeb07dffc5a67a1972c666bb8ddbea","modified":1493622995000},{"_id":"source/_posts/angular-module.md","hash":"5292e8129d1bc7c49b0d59e6a91f2046a9501e82","modified":1493622995000},{"_id":"source/_posts/angular-protractor","hash":"9d325c28252241f909d60c8f2165333303afd29f","modified":1493622995000},{"_id":"source/_posts/angular-provider.md","hash":"affe55451643769eabc254428f1f97f9f923ac55","modified":1493622995000},{"_id":"source/_posts/doc1.md","hash":"7b38a7109acc6c6345ff5597722685d4d2993fc2","modified":1493622995000},{"_id":"source/_posts/rootless.md","hash":"d8219f9883b0ac7593adc06d852f210f0a1c5847","modified":1493623206000},{"_id":"source/_posts/webpack.md","hash":"009078a2b3ac0673f4dcbed683f62a5c4cefef44","modified":1493622995000},{"_id":"themes/apollo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1493623067000},{"_id":"themes/apollo/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1493623067000},{"_id":"themes/apollo/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1493623067000},{"_id":"themes/apollo/layout/layout.ejs","hash":"57a1e3d2c675eb860e825f05aa394b25c4f53c61","modified":1493623067000},{"_id":"themes/apollo/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493623067000},{"_id":"themes/apollo/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493623067000},{"_id":"themes/apollo/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493623067000},{"_id":"themes/apollo/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/after-footer.ejs","hash":"45770a2a60d6e29f91320ddc9f182d3fe9a86059","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/archive.ejs","hash":"ae4b72b6fc0fbcd77deae2e90bcfa87605d1bde9","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/article.ejs","hash":"6d3fd4104f49d3bf78b505ae155091460160b3d0","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/footer.ejs","hash":"cc8331fb0f8e1824ea52e3720358e9313b4e6a03","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/header.ejs","hash":"7b892137daae1fa32b840bf8756f2b7d342d7dbc","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/google-analytics.ejs","hash":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/head.ejs","hash":"253c73cf2d29c6d9590db1a33c3f16fd3407d307","modified":1493623067000},{"_id":"themes/apollo/source/css/style.styl","hash":"72d8e9cd422f4df5ff88045d69ebe3df52864f8d","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1493623067000},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1493623067000},{"_id":"themes/apollo/source/js/script.js","hash":"2556d90688a516ca9085e0d24ae51fe185df0608","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/post/category.ejs","hash":"d346ed4160c07034371a389c894f7b3881947d60","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/post/date.ejs","hash":"5853090af0d8065e346f756729738d458282b452","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/post/gallery.ejs","hash":"36e8d8b320e4dfd429b12c9b91aed8642defc610","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/post/nav.ejs","hash":"563e66450b930e9ae58a37da0fa13970584001b3","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1493623067000},{"_id":"themes/apollo/layout/_partial/post/title.ejs","hash":"6f54c13c84b14d85ea56ae7b6b39625f8de58354","modified":1493623067000},{"_id":"themes/apollo/source/css/_bass/bass.styl","hash":"94d831c822cb229aa4336042417e4a7a68b3846b","modified":1493623067000},{"_id":"themes/apollo/source/css/_bass/syntax.styl","hash":"b5ced75d2167026f18a69780786d2b2349a9d22a","modified":1493623067000},{"_id":"themes/apollo/source/css/_bass/variables.styl","hash":"e68e329f22f648651aba2c8f9bb40676678a0210","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/archive.styl","hash":"dbd8311765c39cab54baf672776bbc91a3638970","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/article-gallery.styl","hash":"925ee764b23984d3d0751b623718341b07d9dff1","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/article-nav.styl","hash":"d40a96d7df7f6c767410ea595166cee46a45a28c","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/article.styl","hash":"55cdc8429d190f5af2f2953065f1dab7f11cee51","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/footer.styl","hash":"e0716e74d205052ca9e97a353321b385579df0e9","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/header.styl","hash":"f890d392f452d89c76c2a0c73439c268b5f5ef88","modified":1493623067000},{"_id":"themes/apollo/source/css/_partial/rwd.styl","hash":"86aaf66b48649cf78d07df242334dffc6008c91c","modified":1493623067000},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1493623067000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1493623067000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1493623067000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1493623067000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1493623067000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1493623067000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"angularjs的ng-model和表单验证(form-validate)","date":"2017-03-26T16:15:32.000Z","_content":"\n由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.\n所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.\n\n然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.\n\n<!--more-->\n\n## ngmodel\n\n按照官方指南, ngmodel 主要的功能有以下几个部分:\n\n* 绑定视图到 model 对象上, 需要依赖比如input, textarea 或者 select这些 directive.(原来这些标准 html 输入控件也被 angular 写成了一个 directive!)\n* 提供表单验证(比如 html5标准的 required, number, email, url)\n* 保存被绑定表单输入控件的状态(valid/invalid, dirty/pristine, touched/untouched, validation errors)\n* 设置对应的 css class和动画(ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-empty, ng-not-empty)\n* **注册**输入控件到它的父表单\n\n原来之前我一直了解到的只有它的第一点,它还有这么多功能.\n\n然而就连第一点,我都没有透彻的理解,实在是惭愧.\n\n先从第一点讲起.其他几点则在第二部分表单验证里面说明.\n\nngmodel 可以在以下几种输入控件(已经被angular重写成了directive)中使用.\n\n让我们过一遍这些已经耳熟能详的标准输入控件在 angularjs 里面被进行了什么样子的神奇改造.\n\n### input\n\n**[type=text]**\n\ntext 控件是其他 input 类型的基础,其他 input 控件大多数的属性是从这个属性的控件继承(directive的继承?)过去的.\n\n```\n<input type=\"text\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [required=\"string\"]\n       [ng-required=\"string\"]\n       [ng-minlength=\"number\"]\n       [ng-maxlength=\"number\"]\n       [pattern=\"string\"]\n       [ng-pattern=\"string\"]\n       [ng-change=\"string\"]\n       [ng-trim=\"boolean\"]>\n\n```\n\n这里的 ng-model 只是 input 的一个参数.用于表明这个数据绑定到当前scope哪个变量中.\n\nname, 很容易漏掉的一个属性,这个属性不只是原来的 input 的 name, 同时 angularjs 也会使用这个 name 注册到当前的 form(directive) 之中.\n\n所以看起来一样的 input 和 form 以及 select 等等这些标准 html 控件实际上都被用 directive 包装了一层,而让所有的控件数据内容在 angularjs 的管理下.\n\n仔细想想也是需要这样,才能方便的实现双绑.\n\nrequired, ng-minlength, pattern 用来做表单验证的属性,后面统一讲.\n\nng-change 就是 onchange.\n\nng-trim input 自带了去掉首尾空格的功能,很好,很强大.也可以设置属性为 false 来关闭.\n\nng 属性和不带 ng 属性主要是否支持 angularjs 表达式的区别.\n\n**[type==checkbox]**\n\n```\n<input type=\"checkbox\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [ng-true-value=\"expression\"]\n       [ng-false-value=\"expression\"]\n       [ng-change=\"string\"]>\n```\n\ncheckbox 就有点特别了\n\n当没有设置 ng-true-value 和 ng-true-value, 选中 checkbox 会把绑定的变量设置成 true, 反之则为 false.\n\n然而它居然没有默认的 value 属性, 也就是你设置 value 是不起作用的.只有设置ng-true-value 和 ng-true-value才能设置对应的值.\n\n曾经就是在这里被坑到了...\n\n另外如果设置对应 ng-model 绑定的变量属性为 true 或者 ng-true-value 均不能在重绘时使 checkbox 被设置为勾选??\n\n这个时候就需要使用 ng-check 来设置初始值.\n\n**[type==radio]**\n\n```\n<input type=\"radio\"\n       ng-model=\"string\"\n       value=\"string\"\n       [name=\"string\"]\n       [ng-change=\"string\"]\n       ng-value=\"string\">\n```\n\nradio就比较中规中矩了,选择时,设置为 value 或者 ng-value.\n\n**input[range]**\n\n```\n<input type=\"range\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [min=\"string\"]\n       [max=\"string\"]\n       [step=\"string\"]\n       [ng-change=\"string\"]\n       [ng-checked=\"expression\"]>\n```\n\n标准的 rage 虽然用的不多,不过也有一些不同的地方\n\n对于不支持 rage 控件的浏览器, rage 会变成一个普通的 input 框,依然包含 binding,validation 和数值的自动转换.\n对于支持 rage 控件的浏览器,浏览器并不允许 rage 赋值成一个非法值.\n\n也就是说,\n\n1.任何非数值都会被赋值成 (max + min) / 2\n2.任何数字超过 max 和 min 都会赋值成 max 或者 min.如果有 step 设置则是按照 step 能到的值来进行赋值.\n\n所以这个控件永远不会有 requied 或者 min 和 max 的 error.\n\n而且 range 也不能够使用 ngMax,ngMin,ngStep 这些 directive,因为这些 directive 并没有设置对应的属性,导致初始化 dom 时,浏览器会使用默认值min = 0, max = 100, and step = 1,来进行初始化.\n\n基本上标准的 html5 的 rage 浏览器支持并不是很完善,推荐使用 css 和 js 来实现自定义的 rage 插件会更好一点.\n\n\n### select\n\nselect 基本没有太多要讲的. \n\nngModel 会绑定对应被选择 option 的 value.\n\n一个问题就是使用 ng-repeat 还是 ng-options 来生成 options.\n\n官方推荐是使用 ng-options. 因为 ng-options 使用了 DocumentFragment 来生成每个 options,可以减少内存占用和渲染占用时间,并且不会生成一个内置的循环用的 scope.\n\n另外就是发现之前自己一直没有认真看 html, 原来 select 还有 size 这么一个属性,用于控制下拉列表的显示选项个数,超过这个个数就会出现滚动条,默认值是0,由浏览器自行控制.\n\n其他控件大同小异,可以参考官方文档,这里就不多说啦.\n\n---\n\n## 表单验证\n\n一个简简单单的 ngmodel, 就几乎做完了你所想到的表单验证几乎需要的全部功能.只要简单封装几乎就能够满足大部分需求.\n\n简直不敢让人相信, angularjs 原来内置了一个这么有用的表单验证功能.\n\n```\n<form\n  [name=\"string\"]>\n...\n</form>\n```\n\n实际上 form 也被实现成了一个 directive, 所以在需要进行表单验证的 form 控件,设置一个 name\n\n这样在当前 scope 里面的时候就会多出一个以 name 属性为命名的变量, 这个变量会存储当前 form 的验证结果.\n\n另外虽然 html 里不允许 form 嵌套,但是在 angularjs 里可以使用 ngForm 标签来进行嵌套. ngForm 是 form directive 的别名.\n\n其中 form 还会被设置一些 class\n\n这里直接引用官网\n\n```\nng-valid is set if the form is valid.\nng-invalid is set if the form is invalid.\nng-pending is set if the form is pending.\nng-pristine is set if the form is pristine.\nng-dirty is set if the form is dirty.\nng-submitted is set if the form was submitted\n```\n\n使用 ngSubmit 来进行提交\n\n\n\n因为 model 绑定之后,任何输入都会导致 model 变化,有时候可能不想校验做的这么灵敏.只是希望在 blur 或者 click 事件之后才更新 model.\n就要使用ngModelOptions这个设置, 来延迟 model 绑定的变化.\n\n\n### 验证中可以使用的属性\n\n只要控件都配置了各种验证条件,那么改 form 中就会有以下的属性来直接提供验证结果,把对应的变量用于绑定验证成功或者失败的提示以及 css, 即可几乎不用写 js实现表单验证.\n\n$valid表示控件验证通过, $invalid则和$valid相反\n\n$error 则为一个错误内容的字典,其中的key为对应的检测属性,值一般为 true, 不存在的错误不会在$error中.\n\n比如 required, minlength, maxlength, pattern, min, max.\n\n对于 input[type=email], 还有特殊的 email 类型的错误.\n \n\n说了这么多,来看一个例子吧.\n\n\n<iframe width=\"100%\" height=\"600\" scroll=\"no\" src=\"//jsfiddle.net/nekorice/dq0f3s8L/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/angluar-form.md","raw":"title: angularjs的ng-model和表单验证(form-validate)\ndate: 2017-03-27 00:15:32\ntags:\n- angularjs\n- 前端\n- form\n---\n\n由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.\n所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.\n\n然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.\n\n<!--more-->\n\n## ngmodel\n\n按照官方指南, ngmodel 主要的功能有以下几个部分:\n\n* 绑定视图到 model 对象上, 需要依赖比如input, textarea 或者 select这些 directive.(原来这些标准 html 输入控件也被 angular 写成了一个 directive!)\n* 提供表单验证(比如 html5标准的 required, number, email, url)\n* 保存被绑定表单输入控件的状态(valid/invalid, dirty/pristine, touched/untouched, validation errors)\n* 设置对应的 css class和动画(ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-empty, ng-not-empty)\n* **注册**输入控件到它的父表单\n\n原来之前我一直了解到的只有它的第一点,它还有这么多功能.\n\n然而就连第一点,我都没有透彻的理解,实在是惭愧.\n\n先从第一点讲起.其他几点则在第二部分表单验证里面说明.\n\nngmodel 可以在以下几种输入控件(已经被angular重写成了directive)中使用.\n\n让我们过一遍这些已经耳熟能详的标准输入控件在 angularjs 里面被进行了什么样子的神奇改造.\n\n### input\n\n**[type=text]**\n\ntext 控件是其他 input 类型的基础,其他 input 控件大多数的属性是从这个属性的控件继承(directive的继承?)过去的.\n\n```\n<input type=\"text\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [required=\"string\"]\n       [ng-required=\"string\"]\n       [ng-minlength=\"number\"]\n       [ng-maxlength=\"number\"]\n       [pattern=\"string\"]\n       [ng-pattern=\"string\"]\n       [ng-change=\"string\"]\n       [ng-trim=\"boolean\"]>\n\n```\n\n这里的 ng-model 只是 input 的一个参数.用于表明这个数据绑定到当前scope哪个变量中.\n\nname, 很容易漏掉的一个属性,这个属性不只是原来的 input 的 name, 同时 angularjs 也会使用这个 name 注册到当前的 form(directive) 之中.\n\n所以看起来一样的 input 和 form 以及 select 等等这些标准 html 控件实际上都被用 directive 包装了一层,而让所有的控件数据内容在 angularjs 的管理下.\n\n仔细想想也是需要这样,才能方便的实现双绑.\n\nrequired, ng-minlength, pattern 用来做表单验证的属性,后面统一讲.\n\nng-change 就是 onchange.\n\nng-trim input 自带了去掉首尾空格的功能,很好,很强大.也可以设置属性为 false 来关闭.\n\nng 属性和不带 ng 属性主要是否支持 angularjs 表达式的区别.\n\n**[type==checkbox]**\n\n```\n<input type=\"checkbox\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [ng-true-value=\"expression\"]\n       [ng-false-value=\"expression\"]\n       [ng-change=\"string\"]>\n```\n\ncheckbox 就有点特别了\n\n当没有设置 ng-true-value 和 ng-true-value, 选中 checkbox 会把绑定的变量设置成 true, 反之则为 false.\n\n然而它居然没有默认的 value 属性, 也就是你设置 value 是不起作用的.只有设置ng-true-value 和 ng-true-value才能设置对应的值.\n\n曾经就是在这里被坑到了...\n\n另外如果设置对应 ng-model 绑定的变量属性为 true 或者 ng-true-value 均不能在重绘时使 checkbox 被设置为勾选??\n\n这个时候就需要使用 ng-check 来设置初始值.\n\n**[type==radio]**\n\n```\n<input type=\"radio\"\n       ng-model=\"string\"\n       value=\"string\"\n       [name=\"string\"]\n       [ng-change=\"string\"]\n       ng-value=\"string\">\n```\n\nradio就比较中规中矩了,选择时,设置为 value 或者 ng-value.\n\n**input[range]**\n\n```\n<input type=\"range\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [min=\"string\"]\n       [max=\"string\"]\n       [step=\"string\"]\n       [ng-change=\"string\"]\n       [ng-checked=\"expression\"]>\n```\n\n标准的 rage 虽然用的不多,不过也有一些不同的地方\n\n对于不支持 rage 控件的浏览器, rage 会变成一个普通的 input 框,依然包含 binding,validation 和数值的自动转换.\n对于支持 rage 控件的浏览器,浏览器并不允许 rage 赋值成一个非法值.\n\n也就是说,\n\n1.任何非数值都会被赋值成 (max + min) / 2\n2.任何数字超过 max 和 min 都会赋值成 max 或者 min.如果有 step 设置则是按照 step 能到的值来进行赋值.\n\n所以这个控件永远不会有 requied 或者 min 和 max 的 error.\n\n而且 range 也不能够使用 ngMax,ngMin,ngStep 这些 directive,因为这些 directive 并没有设置对应的属性,导致初始化 dom 时,浏览器会使用默认值min = 0, max = 100, and step = 1,来进行初始化.\n\n基本上标准的 html5 的 rage 浏览器支持并不是很完善,推荐使用 css 和 js 来实现自定义的 rage 插件会更好一点.\n\n\n### select\n\nselect 基本没有太多要讲的. \n\nngModel 会绑定对应被选择 option 的 value.\n\n一个问题就是使用 ng-repeat 还是 ng-options 来生成 options.\n\n官方推荐是使用 ng-options. 因为 ng-options 使用了 DocumentFragment 来生成每个 options,可以减少内存占用和渲染占用时间,并且不会生成一个内置的循环用的 scope.\n\n另外就是发现之前自己一直没有认真看 html, 原来 select 还有 size 这么一个属性,用于控制下拉列表的显示选项个数,超过这个个数就会出现滚动条,默认值是0,由浏览器自行控制.\n\n其他控件大同小异,可以参考官方文档,这里就不多说啦.\n\n---\n\n## 表单验证\n\n一个简简单单的 ngmodel, 就几乎做完了你所想到的表单验证几乎需要的全部功能.只要简单封装几乎就能够满足大部分需求.\n\n简直不敢让人相信, angularjs 原来内置了一个这么有用的表单验证功能.\n\n```\n<form\n  [name=\"string\"]>\n...\n</form>\n```\n\n实际上 form 也被实现成了一个 directive, 所以在需要进行表单验证的 form 控件,设置一个 name\n\n这样在当前 scope 里面的时候就会多出一个以 name 属性为命名的变量, 这个变量会存储当前 form 的验证结果.\n\n另外虽然 html 里不允许 form 嵌套,但是在 angularjs 里可以使用 ngForm 标签来进行嵌套. ngForm 是 form directive 的别名.\n\n其中 form 还会被设置一些 class\n\n这里直接引用官网\n\n```\nng-valid is set if the form is valid.\nng-invalid is set if the form is invalid.\nng-pending is set if the form is pending.\nng-pristine is set if the form is pristine.\nng-dirty is set if the form is dirty.\nng-submitted is set if the form was submitted\n```\n\n使用 ngSubmit 来进行提交\n\n\n\n因为 model 绑定之后,任何输入都会导致 model 变化,有时候可能不想校验做的这么灵敏.只是希望在 blur 或者 click 事件之后才更新 model.\n就要使用ngModelOptions这个设置, 来延迟 model 绑定的变化.\n\n\n### 验证中可以使用的属性\n\n只要控件都配置了各种验证条件,那么改 form 中就会有以下的属性来直接提供验证结果,把对应的变量用于绑定验证成功或者失败的提示以及 css, 即可几乎不用写 js实现表单验证.\n\n$valid表示控件验证通过, $invalid则和$valid相反\n\n$error 则为一个错误内容的字典,其中的key为对应的检测属性,值一般为 true, 不存在的错误不会在$error中.\n\n比如 required, minlength, maxlength, pattern, min, max.\n\n对于 input[type=email], 还有特殊的 email 类型的错误.\n \n\n说了这么多,来看一个例子吧.\n\n\n<iframe width=\"100%\" height=\"600\" scroll=\"no\" src=\"//jsfiddle.net/nekorice/dq0f3s8L/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angluar-form","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skfe30001va0dyitvggsj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.<br>所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.</p>\n<p>然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.</p>\n<a id=\"more\"></a>\n<h2 id=\"ngmodel\"><a href=\"#ngmodel\" class=\"headerlink\" title=\"ngmodel\"></a>ngmodel</h2><p>按照官方指南, ngmodel 主要的功能有以下几个部分:</p>\n<ul>\n<li>绑定视图到 model 对象上, 需要依赖比如input, textarea 或者 select这些 directive.(原来这些标准 html 输入控件也被 angular 写成了一个 directive!)</li>\n<li>提供表单验证(比如 html5标准的 required, number, email, url)</li>\n<li>保存被绑定表单输入控件的状态(valid/invalid, dirty/pristine, touched/untouched, validation errors)</li>\n<li>设置对应的 css class和动画(ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-empty, ng-not-empty)</li>\n<li><strong>注册</strong>输入控件到它的父表单</li>\n</ul>\n<p>原来之前我一直了解到的只有它的第一点,它还有这么多功能.</p>\n<p>然而就连第一点,我都没有透彻的理解,实在是惭愧.</p>\n<p>先从第一点讲起.其他几点则在第二部分表单验证里面说明.</p>\n<p>ngmodel 可以在以下几种输入控件(已经被angular重写成了directive)中使用.</p>\n<p>让我们过一遍这些已经耳熟能详的标准输入控件在 angularjs 里面被进行了什么样子的神奇改造.</p>\n<h3 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h3><p><strong>[type=text]</strong></p>\n<p>text 控件是其他 input 类型的基础,其他 input 控件大多数的属性是从这个属性的控件继承(directive的继承?)过去的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [required=&quot;string&quot;]</div><div class=\"line\">       [ng-required=&quot;string&quot;]</div><div class=\"line\">       [ng-minlength=&quot;number&quot;]</div><div class=\"line\">       [ng-maxlength=&quot;number&quot;]</div><div class=\"line\">       [pattern=&quot;string&quot;]</div><div class=\"line\">       [ng-pattern=&quot;string&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]</div><div class=\"line\">       [ng-trim=&quot;boolean&quot;]&gt;</div></pre></td></tr></table></figure>\n<p>这里的 ng-model 只是 input 的一个参数.用于表明这个数据绑定到当前scope哪个变量中.</p>\n<p>name, 很容易漏掉的一个属性,这个属性不只是原来的 input 的 name, 同时 angularjs 也会使用这个 name 注册到当前的 form(directive) 之中.</p>\n<p>所以看起来一样的 input 和 form 以及 select 等等这些标准 html 控件实际上都被用 directive 包装了一层,而让所有的控件数据内容在 angularjs 的管理下.</p>\n<p>仔细想想也是需要这样,才能方便的实现双绑.</p>\n<p>required, ng-minlength, pattern 用来做表单验证的属性,后面统一讲.</p>\n<p>ng-change 就是 onchange.</p>\n<p>ng-trim input 自带了去掉首尾空格的功能,很好,很强大.也可以设置属性为 false 来关闭.</p>\n<p>ng 属性和不带 ng 属性主要是否支持 angularjs 表达式的区别.</p>\n<p><strong>[type==checkbox]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;checkbox&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [ng-true-value=&quot;expression&quot;]</div><div class=\"line\">       [ng-false-value=&quot;expression&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]&gt;</div></pre></td></tr></table></figure>\n<p>checkbox 就有点特别了</p>\n<p>当没有设置 ng-true-value 和 ng-true-value, 选中 checkbox 会把绑定的变量设置成 true, 反之则为 false.</p>\n<p>然而它居然没有默认的 value 属性, 也就是你设置 value 是不起作用的.只有设置ng-true-value 和 ng-true-value才能设置对应的值.</p>\n<p>曾经就是在这里被坑到了…</p>\n<p>另外如果设置对应 ng-model 绑定的变量属性为 true 或者 ng-true-value 均不能在重绘时使 checkbox 被设置为勾选??</p>\n<p>这个时候就需要使用 ng-check 来设置初始值.</p>\n<p><strong>[type==radio]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       value=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]</div><div class=\"line\">       ng-value=&quot;string&quot;&gt;</div></pre></td></tr></table></figure>\n<p>radio就比较中规中矩了,选择时,设置为 value 或者 ng-value.</p>\n<p><strong>input[range]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;range&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [min=&quot;string&quot;]</div><div class=\"line\">       [max=&quot;string&quot;]</div><div class=\"line\">       [step=&quot;string&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]</div><div class=\"line\">       [ng-checked=&quot;expression&quot;]&gt;</div></pre></td></tr></table></figure>\n<p>标准的 rage 虽然用的不多,不过也有一些不同的地方</p>\n<p>对于不支持 rage 控件的浏览器, rage 会变成一个普通的 input 框,依然包含 binding,validation 和数值的自动转换.<br>对于支持 rage 控件的浏览器,浏览器并不允许 rage 赋值成一个非法值.</p>\n<p>也就是说,</p>\n<p>1.任何非数值都会被赋值成 (max + min) / 2<br>2.任何数字超过 max 和 min 都会赋值成 max 或者 min.如果有 step 设置则是按照 step 能到的值来进行赋值.</p>\n<p>所以这个控件永远不会有 requied 或者 min 和 max 的 error.</p>\n<p>而且 range 也不能够使用 ngMax,ngMin,ngStep 这些 directive,因为这些 directive 并没有设置对应的属性,导致初始化 dom 时,浏览器会使用默认值min = 0, max = 100, and step = 1,来进行初始化.</p>\n<p>基本上标准的 html5 的 rage 浏览器支持并不是很完善,推荐使用 css 和 js 来实现自定义的 rage 插件会更好一点.</p>\n<h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p>select 基本没有太多要讲的. </p>\n<p>ngModel 会绑定对应被选择 option 的 value.</p>\n<p>一个问题就是使用 ng-repeat 还是 ng-options 来生成 options.</p>\n<p>官方推荐是使用 ng-options. 因为 ng-options 使用了 DocumentFragment 来生成每个 options,可以减少内存占用和渲染占用时间,并且不会生成一个内置的循环用的 scope.</p>\n<p>另外就是发现之前自己一直没有认真看 html, 原来 select 还有 size 这么一个属性,用于控制下拉列表的显示选项个数,超过这个个数就会出现滚动条,默认值是0,由浏览器自行控制.</p>\n<p>其他控件大同小异,可以参考官方文档,这里就不多说啦.</p>\n<hr>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><p>一个简简单单的 ngmodel, 就几乎做完了你所想到的表单验证几乎需要的全部功能.只要简单封装几乎就能够满足大部分需求.</p>\n<p>简直不敢让人相信, angularjs 原来内置了一个这么有用的表单验证功能.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form</div><div class=\"line\">  [name=&quot;string&quot;]&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>实际上 form 也被实现成了一个 directive, 所以在需要进行表单验证的 form 控件,设置一个 name</p>\n<p>这样在当前 scope 里面的时候就会多出一个以 name 属性为命名的变量, 这个变量会存储当前 form 的验证结果.</p>\n<p>另外虽然 html 里不允许 form 嵌套,但是在 angularjs 里可以使用 ngForm 标签来进行嵌套. ngForm 是 form directive 的别名.</p>\n<p>其中 form 还会被设置一些 class</p>\n<p>这里直接引用官网</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-valid is set if the form is valid.</div><div class=\"line\">ng-invalid is set if the form is invalid.</div><div class=\"line\">ng-pending is set if the form is pending.</div><div class=\"line\">ng-pristine is set if the form is pristine.</div><div class=\"line\">ng-dirty is set if the form is dirty.</div><div class=\"line\">ng-submitted is set if the form was submitted</div></pre></td></tr></table></figure>\n<p>使用 ngSubmit 来进行提交</p>\n<p>因为 model 绑定之后,任何输入都会导致 model 变化,有时候可能不想校验做的这么灵敏.只是希望在 blur 或者 click 事件之后才更新 model.<br>就要使用ngModelOptions这个设置, 来延迟 model 绑定的变化.</p>\n<h3 id=\"验证中可以使用的属性\"><a href=\"#验证中可以使用的属性\" class=\"headerlink\" title=\"验证中可以使用的属性\"></a>验证中可以使用的属性</h3><p>只要控件都配置了各种验证条件,那么改 form 中就会有以下的属性来直接提供验证结果,把对应的变量用于绑定验证成功或者失败的提示以及 css, 即可几乎不用写 js实现表单验证.</p>\n<p>$valid表示控件验证通过, $invalid则和$valid相反</p>\n<p>$error 则为一个错误内容的字典,其中的key为对应的检测属性,值一般为 true, 不存在的错误不会在$error中.</p>\n<p>比如 required, minlength, maxlength, pattern, min, max.</p>\n<p>对于 input[type=email], 还有特殊的 email 类型的错误.</p>\n<p>说了这么多,来看一个例子吧.</p>\n<iframe width=\"100%\" height=\"600\" scroll=\"no\" src=\"//jsfiddle.net/nekorice/dq0f3s8L/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.<br>所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.</p>\n<p>然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.</p>","more":"<h2 id=\"ngmodel\"><a href=\"#ngmodel\" class=\"headerlink\" title=\"ngmodel\"></a>ngmodel</h2><p>按照官方指南, ngmodel 主要的功能有以下几个部分:</p>\n<ul>\n<li>绑定视图到 model 对象上, 需要依赖比如input, textarea 或者 select这些 directive.(原来这些标准 html 输入控件也被 angular 写成了一个 directive!)</li>\n<li>提供表单验证(比如 html5标准的 required, number, email, url)</li>\n<li>保存被绑定表单输入控件的状态(valid/invalid, dirty/pristine, touched/untouched, validation errors)</li>\n<li>设置对应的 css class和动画(ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-empty, ng-not-empty)</li>\n<li><strong>注册</strong>输入控件到它的父表单</li>\n</ul>\n<p>原来之前我一直了解到的只有它的第一点,它还有这么多功能.</p>\n<p>然而就连第一点,我都没有透彻的理解,实在是惭愧.</p>\n<p>先从第一点讲起.其他几点则在第二部分表单验证里面说明.</p>\n<p>ngmodel 可以在以下几种输入控件(已经被angular重写成了directive)中使用.</p>\n<p>让我们过一遍这些已经耳熟能详的标准输入控件在 angularjs 里面被进行了什么样子的神奇改造.</p>\n<h3 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h3><p><strong>[type=text]</strong></p>\n<p>text 控件是其他 input 类型的基础,其他 input 控件大多数的属性是从这个属性的控件继承(directive的继承?)过去的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [required=&quot;string&quot;]</div><div class=\"line\">       [ng-required=&quot;string&quot;]</div><div class=\"line\">       [ng-minlength=&quot;number&quot;]</div><div class=\"line\">       [ng-maxlength=&quot;number&quot;]</div><div class=\"line\">       [pattern=&quot;string&quot;]</div><div class=\"line\">       [ng-pattern=&quot;string&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]</div><div class=\"line\">       [ng-trim=&quot;boolean&quot;]&gt;</div></pre></td></tr></table></figure>\n<p>这里的 ng-model 只是 input 的一个参数.用于表明这个数据绑定到当前scope哪个变量中.</p>\n<p>name, 很容易漏掉的一个属性,这个属性不只是原来的 input 的 name, 同时 angularjs 也会使用这个 name 注册到当前的 form(directive) 之中.</p>\n<p>所以看起来一样的 input 和 form 以及 select 等等这些标准 html 控件实际上都被用 directive 包装了一层,而让所有的控件数据内容在 angularjs 的管理下.</p>\n<p>仔细想想也是需要这样,才能方便的实现双绑.</p>\n<p>required, ng-minlength, pattern 用来做表单验证的属性,后面统一讲.</p>\n<p>ng-change 就是 onchange.</p>\n<p>ng-trim input 自带了去掉首尾空格的功能,很好,很强大.也可以设置属性为 false 来关闭.</p>\n<p>ng 属性和不带 ng 属性主要是否支持 angularjs 表达式的区别.</p>\n<p><strong>[type==checkbox]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;checkbox&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [ng-true-value=&quot;expression&quot;]</div><div class=\"line\">       [ng-false-value=&quot;expression&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]&gt;</div></pre></td></tr></table></figure>\n<p>checkbox 就有点特别了</p>\n<p>当没有设置 ng-true-value 和 ng-true-value, 选中 checkbox 会把绑定的变量设置成 true, 反之则为 false.</p>\n<p>然而它居然没有默认的 value 属性, 也就是你设置 value 是不起作用的.只有设置ng-true-value 和 ng-true-value才能设置对应的值.</p>\n<p>曾经就是在这里被坑到了…</p>\n<p>另外如果设置对应 ng-model 绑定的变量属性为 true 或者 ng-true-value 均不能在重绘时使 checkbox 被设置为勾选??</p>\n<p>这个时候就需要使用 ng-check 来设置初始值.</p>\n<p><strong>[type==radio]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       value=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]</div><div class=\"line\">       ng-value=&quot;string&quot;&gt;</div></pre></td></tr></table></figure>\n<p>radio就比较中规中矩了,选择时,设置为 value 或者 ng-value.</p>\n<p><strong>input[range]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;range&quot;</div><div class=\"line\">       ng-model=&quot;string&quot;</div><div class=\"line\">       [name=&quot;string&quot;]</div><div class=\"line\">       [min=&quot;string&quot;]</div><div class=\"line\">       [max=&quot;string&quot;]</div><div class=\"line\">       [step=&quot;string&quot;]</div><div class=\"line\">       [ng-change=&quot;string&quot;]</div><div class=\"line\">       [ng-checked=&quot;expression&quot;]&gt;</div></pre></td></tr></table></figure>\n<p>标准的 rage 虽然用的不多,不过也有一些不同的地方</p>\n<p>对于不支持 rage 控件的浏览器, rage 会变成一个普通的 input 框,依然包含 binding,validation 和数值的自动转换.<br>对于支持 rage 控件的浏览器,浏览器并不允许 rage 赋值成一个非法值.</p>\n<p>也就是说,</p>\n<p>1.任何非数值都会被赋值成 (max + min) / 2<br>2.任何数字超过 max 和 min 都会赋值成 max 或者 min.如果有 step 设置则是按照 step 能到的值来进行赋值.</p>\n<p>所以这个控件永远不会有 requied 或者 min 和 max 的 error.</p>\n<p>而且 range 也不能够使用 ngMax,ngMin,ngStep 这些 directive,因为这些 directive 并没有设置对应的属性,导致初始化 dom 时,浏览器会使用默认值min = 0, max = 100, and step = 1,来进行初始化.</p>\n<p>基本上标准的 html5 的 rage 浏览器支持并不是很完善,推荐使用 css 和 js 来实现自定义的 rage 插件会更好一点.</p>\n<h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p>select 基本没有太多要讲的. </p>\n<p>ngModel 会绑定对应被选择 option 的 value.</p>\n<p>一个问题就是使用 ng-repeat 还是 ng-options 来生成 options.</p>\n<p>官方推荐是使用 ng-options. 因为 ng-options 使用了 DocumentFragment 来生成每个 options,可以减少内存占用和渲染占用时间,并且不会生成一个内置的循环用的 scope.</p>\n<p>另外就是发现之前自己一直没有认真看 html, 原来 select 还有 size 这么一个属性,用于控制下拉列表的显示选项个数,超过这个个数就会出现滚动条,默认值是0,由浏览器自行控制.</p>\n<p>其他控件大同小异,可以参考官方文档,这里就不多说啦.</p>\n<hr>\n<h2 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h2><p>一个简简单单的 ngmodel, 就几乎做完了你所想到的表单验证几乎需要的全部功能.只要简单封装几乎就能够满足大部分需求.</p>\n<p>简直不敢让人相信, angularjs 原来内置了一个这么有用的表单验证功能.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form</div><div class=\"line\">  [name=&quot;string&quot;]&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>实际上 form 也被实现成了一个 directive, 所以在需要进行表单验证的 form 控件,设置一个 name</p>\n<p>这样在当前 scope 里面的时候就会多出一个以 name 属性为命名的变量, 这个变量会存储当前 form 的验证结果.</p>\n<p>另外虽然 html 里不允许 form 嵌套,但是在 angularjs 里可以使用 ngForm 标签来进行嵌套. ngForm 是 form directive 的别名.</p>\n<p>其中 form 还会被设置一些 class</p>\n<p>这里直接引用官网</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-valid is set if the form is valid.</div><div class=\"line\">ng-invalid is set if the form is invalid.</div><div class=\"line\">ng-pending is set if the form is pending.</div><div class=\"line\">ng-pristine is set if the form is pristine.</div><div class=\"line\">ng-dirty is set if the form is dirty.</div><div class=\"line\">ng-submitted is set if the form was submitted</div></pre></td></tr></table></figure>\n<p>使用 ngSubmit 来进行提交</p>\n<p>因为 model 绑定之后,任何输入都会导致 model 变化,有时候可能不想校验做的这么灵敏.只是希望在 blur 或者 click 事件之后才更新 model.<br>就要使用ngModelOptions这个设置, 来延迟 model 绑定的变化.</p>\n<h3 id=\"验证中可以使用的属性\"><a href=\"#验证中可以使用的属性\" class=\"headerlink\" title=\"验证中可以使用的属性\"></a>验证中可以使用的属性</h3><p>只要控件都配置了各种验证条件,那么改 form 中就会有以下的属性来直接提供验证结果,把对应的变量用于绑定验证成功或者失败的提示以及 css, 即可几乎不用写 js实现表单验证.</p>\n<p>$valid表示控件验证通过, $invalid则和$valid相反</p>\n<p>$error 则为一个错误内容的字典,其中的key为对应的检测属性,值一般为 true, 不存在的错误不会在$error中.</p>\n<p>比如 required, minlength, maxlength, pattern, min, max.</p>\n<p>对于 input[type=email], 还有特殊的 email 类型的错误.</p>\n<p>说了这么多,来看一个例子吧.</p>\n<iframe width=\"100%\" height=\"600\" scroll=\"no\" src=\"//jsfiddle.net/nekorice/dq0f3s8L/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>"},{"title":"angular的directive","date":"2017-04-10T16:57:03.000Z","_content":"\n之前一直以为 directive 只是一种简单的渲染模板的功能.\n\n随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. \n\n<!--more-->\n\n## directive 的运行机制\n\nlink\n\ncontroller\n\n\n## directive 的编写\n\n以前写过一篇,这里直接列一个快速清单.\n\nsss\n\n\n\n\n","source":"_posts/angular-direct.md","raw":"title: angular的directive\ndate: 2017-04-11 00:57:03\ntags:\n- angularjs\n- directive\n- js\n---\n\n之前一直以为 directive 只是一种简单的渲染模板的功能.\n\n随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. \n\n<!--more-->\n\n## directive 的运行机制\n\nlink\n\ncontroller\n\n\n## directive 的编写\n\n以前写过一篇,这里直接列一个快速清单.\n\nsss\n\n\n\n\n","slug":"angular-direct","published":1,"updated":"2017-05-01T07:19:01.000Z","_id":"cj25skfe50002va0djmkw2ozi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前一直以为 directive 只是一种简单的渲染模板的功能.</p>\n<p>随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. </p>\n<a id=\"more\"></a>\n<h2 id=\"directive-的运行机制\"><a href=\"#directive-的运行机制\" class=\"headerlink\" title=\"directive 的运行机制\"></a>directive 的运行机制</h2><p>link</p>\n<p>controller</p>\n<h2 id=\"directive-的编写\"><a href=\"#directive-的编写\" class=\"headerlink\" title=\"directive 的编写\"></a>directive 的编写</h2><p>以前写过一篇,这里直接列一个快速清单.</p>\n<p>sss</p>\n","site":{"data":{}},"excerpt":"<p>之前一直以为 directive 只是一种简单的渲染模板的功能.</p>\n<p>随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. </p>","more":"<h2 id=\"directive-的运行机制\"><a href=\"#directive-的运行机制\" class=\"headerlink\" title=\"directive 的运行机制\"></a>directive 的运行机制</h2><p>link</p>\n<p>controller</p>\n<h2 id=\"directive-的编写\"><a href=\"#directive-的编写\" class=\"headerlink\" title=\"directive 的编写\"></a>directive 的编写</h2><p>以前写过一篇,这里直接列一个快速清单.</p>\n<p>sss</p>"},{"title":"angularjs自定义directive","date":"2016-01-27T15:13:47.000Z","_content":"\n最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.\n\n页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.\n\n<!--more-->\n\n#directive 的定义\n\n参考[官方文档](https://docs.angularjs.org/guide/directive)\n\n定义一个 directive 的基本格式很简单,第一个参数是 directive 的 name, 第二个参数是一个函数,这个函数需要返回一个 object. \n\n```javascript\n.directive('myCustomer', function() {\n  return {\n    templateUrl: 'my-customer.html'\n  };\n});\n```\n\n也可以写成依赖注入的数组形式.\n\n```\n.directive('myCustomer', [$timeout, function($timeout){\n  return {\n    templateUrl: 'my-customer.html'\n  }\n}])\n\n```\n\ndirective 的 name 应当使用驼峰命名法,在 angularjs解析 html 时,以':','-','_'分割单词,和 data 或者 x 前缀都会被识别为对应 name 的 directive.\n\n但是如果中间没有分割,比如写成 ngModel 则无法识别出来. 这样处理的原因,可能是因为 html 对大小写不敏感.\n\n```\n<div ng-controller=\"Controller\">\n  Hello <input ng-model='name'> <hr/>\n  <span ng-bind=\"name\"></span> <br/>\n  <span ng:bind=\"name\"></span> <br/>\n  <span ng_bind=\"name\"></span> <br/>\n  <span data-ng-bind=\"name\"></span> <br/>\n  <span x-ng-bind=\"name\"></span> <br/>\n</div>\n```\n\n\n#directive 的参数配置\n\n在第二个参数中函数返回的 object 里定义directive 的配置.\n\n常见的参数有\n\n```\nrestrict: 'AEC',\n* E - Element name (default): <my-directive></my-directive>\n* A - Attribute (default): <div my-directive=\"exp\"></div>\n* C - Class: <div class=\"my-directive: exp;\"></div>\n* M - Comment: <!-- directive: my-directive exp -->\n```\n\n是否替换掉原有的 directive 标签\n```\nreplace: True/False\n```\n\n是否把标签的内部元素也传入 directive 进行处理\n```\ntransclude: True/False\n```\n\n模板字符串/模板 url(只能使用其中一个参数)\n```\ntemplate:\"\"\ntemplate_url:\"\"\n```\n\n绑定行为(link/compile二选一)\n\n```\nlink: Object | function\ncompile: Object | function\n```\n\n完整的参数参考下述页面\n[$compile 页面](https://docs.angularjs.org/api/ng/service/$compile)\n\n##directive scope \n\n### 继承 scope\n\nscope 可以取三种值, true, false 和一个 Object{}\n\n当为 true 时,则继承 controller 的 scope, 通过访问 parent 来访问 controller 中的 scope, 所有修改都不会影响原有的 scope.\n\n为 false 时,直接使用当前的父 controller 的 scope, 会共享之间的修改.\n\n###isolated scope\n\ndirective 虽然可以访问模块的 scope, 官方建议通过属性把值传递到directive 的isolated scope中.\n\n参考官方文档\n\n```\n\n.directive('myCustomer', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      customerInfo: '=info'\n    },\n    templateUrl: 'my-customer-iso.html'\n  };\n});\n\n<div ng-controller=\"Controller\">\n  <my-customer info=\"naomi\"></my-customer>\n  <my-customer info=\"igor\"></my-customer>\n</div>\n\n```\n显示为\n\n```\nName: Naomi Address: 1600 Amphitheatre\nName: Igor Address: 123 Somewhere\n```\n\nisolated scope 一共有以下几种传入方式\n``` \n'='  属性的值使用 angularjs 表达式计算\n'@'  直接使用属性的字符串\n'&'  则是可以传递函数\n\n```\n\n## link 函数\n\n在 directive 生成模板的时候,需要一些额外处理,可以在 link 函数中处理.\n\n需要注意的是, link 函数调用的时候(Post-linking function), \n\n这个时候如果获取 template_url 中的元素,\n\ndirective 是不一定完成渲染的,\n\n如果这个时候去取子元素,很可能得到的会是空值.\n\n要保证 post-link 里面可以获得子元素,应当使用 template 来作为模板的渲染.而不是一个 url.\n\n#### 如何保证在 directive 渲染完成后执行函数\n\n实在不能避免使用 template_url 来定义模板,目前一种可行办法是使用$timeout service\n\n使用$timeout,这个 service, 当后面不带时间参数时,\n\n定义的回调函数将在 angularjs 渲染完成之后调用.\n\n相当于 jquery 的 document.ready()函数\n\n```\n.directive('myCustomer', [$timeout, function($timeout){\n  return {\n    templateUrl: 'my-customer.html',\n    replace: true,\n    link: function (scope, element, attrs) {\n      $timeout(function (){\n        //do something when angularjs loaded\n      })\n    }\n  }\n}])\n\n```\n\n## 实时更新 directive\n\n默认 directive 只在生成的时候 link.\n\n需要实时更新则要使用 scope.watch,来检测 scope 的修改\n\n```\n\n.directive('myCustomer', function(){\n  return {\n    templateUrl: 'my-customer.html',\n    replace: true,\n    link: function (scope, element, attrs) {\n\n      scope.$watch(attrs.filter, function (newValue) {\n        //filter属性可能是用其他的 scope 中传递过来的值        \n        scope.filter = newValue\n      })\n\n    }\n  }\n})\n\n```\n\n## 如何动态获取 directive 的 name\n\n比如定义了几个功能相似的 directive, 又不想用属性来区分,而是想要用 directive name 来区分.\n\n我定义了一个 chart 的 directive, 但是我还想定义几个叫做 pie,bar 和 line 的 directive \n来作为 chart type='pie'|'bar'|'line' 的别名,这个时候想要动态获取一下 directive 来带入到一个生成 directive 的函数中.\n\n需要动态获得 directive 的 name,link 函数无法获取 directive 的name, 这个时候就可以使用compile 函数.\n\n```\ncompile: function(cElem, cAttrs, transclude) {\n      //get directive name\n      var name = this.name;\n      //link func\n      return function (scope, element, attrs) {\n          \n          //do somethin\n          myFunc(name)\n\n        });\n      }\n    }// end compile\n```\n\ncompile 函数定义就是会返回一个 link 函数,而 compile 的this 指针指向的就是 directive 对象.利用闭包就可以传递 name.\n\n需要注意的是当使用 compile 参数时, link 定义将会失效.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/angular-directive.md","raw":"title: angularjs自定义directive\ndate: 2016-01-27 23:13:47\ntags:\n- angularjs\n- directive\n- 前端\n---\n\n最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.\n\n页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.\n\n<!--more-->\n\n#directive 的定义\n\n参考[官方文档](https://docs.angularjs.org/guide/directive)\n\n定义一个 directive 的基本格式很简单,第一个参数是 directive 的 name, 第二个参数是一个函数,这个函数需要返回一个 object. \n\n```javascript\n.directive('myCustomer', function() {\n  return {\n    templateUrl: 'my-customer.html'\n  };\n});\n```\n\n也可以写成依赖注入的数组形式.\n\n```\n.directive('myCustomer', [$timeout, function($timeout){\n  return {\n    templateUrl: 'my-customer.html'\n  }\n}])\n\n```\n\ndirective 的 name 应当使用驼峰命名法,在 angularjs解析 html 时,以':','-','_'分割单词,和 data 或者 x 前缀都会被识别为对应 name 的 directive.\n\n但是如果中间没有分割,比如写成 ngModel 则无法识别出来. 这样处理的原因,可能是因为 html 对大小写不敏感.\n\n```\n<div ng-controller=\"Controller\">\n  Hello <input ng-model='name'> <hr/>\n  <span ng-bind=\"name\"></span> <br/>\n  <span ng:bind=\"name\"></span> <br/>\n  <span ng_bind=\"name\"></span> <br/>\n  <span data-ng-bind=\"name\"></span> <br/>\n  <span x-ng-bind=\"name\"></span> <br/>\n</div>\n```\n\n\n#directive 的参数配置\n\n在第二个参数中函数返回的 object 里定义directive 的配置.\n\n常见的参数有\n\n```\nrestrict: 'AEC',\n* E - Element name (default): <my-directive></my-directive>\n* A - Attribute (default): <div my-directive=\"exp\"></div>\n* C - Class: <div class=\"my-directive: exp;\"></div>\n* M - Comment: <!-- directive: my-directive exp -->\n```\n\n是否替换掉原有的 directive 标签\n```\nreplace: True/False\n```\n\n是否把标签的内部元素也传入 directive 进行处理\n```\ntransclude: True/False\n```\n\n模板字符串/模板 url(只能使用其中一个参数)\n```\ntemplate:\"\"\ntemplate_url:\"\"\n```\n\n绑定行为(link/compile二选一)\n\n```\nlink: Object | function\ncompile: Object | function\n```\n\n完整的参数参考下述页面\n[$compile 页面](https://docs.angularjs.org/api/ng/service/$compile)\n\n##directive scope \n\n### 继承 scope\n\nscope 可以取三种值, true, false 和一个 Object{}\n\n当为 true 时,则继承 controller 的 scope, 通过访问 parent 来访问 controller 中的 scope, 所有修改都不会影响原有的 scope.\n\n为 false 时,直接使用当前的父 controller 的 scope, 会共享之间的修改.\n\n###isolated scope\n\ndirective 虽然可以访问模块的 scope, 官方建议通过属性把值传递到directive 的isolated scope中.\n\n参考官方文档\n\n```\n\n.directive('myCustomer', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      customerInfo: '=info'\n    },\n    templateUrl: 'my-customer-iso.html'\n  };\n});\n\n<div ng-controller=\"Controller\">\n  <my-customer info=\"naomi\"></my-customer>\n  <my-customer info=\"igor\"></my-customer>\n</div>\n\n```\n显示为\n\n```\nName: Naomi Address: 1600 Amphitheatre\nName: Igor Address: 123 Somewhere\n```\n\nisolated scope 一共有以下几种传入方式\n``` \n'='  属性的值使用 angularjs 表达式计算\n'@'  直接使用属性的字符串\n'&'  则是可以传递函数\n\n```\n\n## link 函数\n\n在 directive 生成模板的时候,需要一些额外处理,可以在 link 函数中处理.\n\n需要注意的是, link 函数调用的时候(Post-linking function), \n\n这个时候如果获取 template_url 中的元素,\n\ndirective 是不一定完成渲染的,\n\n如果这个时候去取子元素,很可能得到的会是空值.\n\n要保证 post-link 里面可以获得子元素,应当使用 template 来作为模板的渲染.而不是一个 url.\n\n#### 如何保证在 directive 渲染完成后执行函数\n\n实在不能避免使用 template_url 来定义模板,目前一种可行办法是使用$timeout service\n\n使用$timeout,这个 service, 当后面不带时间参数时,\n\n定义的回调函数将在 angularjs 渲染完成之后调用.\n\n相当于 jquery 的 document.ready()函数\n\n```\n.directive('myCustomer', [$timeout, function($timeout){\n  return {\n    templateUrl: 'my-customer.html',\n    replace: true,\n    link: function (scope, element, attrs) {\n      $timeout(function (){\n        //do something when angularjs loaded\n      })\n    }\n  }\n}])\n\n```\n\n## 实时更新 directive\n\n默认 directive 只在生成的时候 link.\n\n需要实时更新则要使用 scope.watch,来检测 scope 的修改\n\n```\n\n.directive('myCustomer', function(){\n  return {\n    templateUrl: 'my-customer.html',\n    replace: true,\n    link: function (scope, element, attrs) {\n\n      scope.$watch(attrs.filter, function (newValue) {\n        //filter属性可能是用其他的 scope 中传递过来的值        \n        scope.filter = newValue\n      })\n\n    }\n  }\n})\n\n```\n\n## 如何动态获取 directive 的 name\n\n比如定义了几个功能相似的 directive, 又不想用属性来区分,而是想要用 directive name 来区分.\n\n我定义了一个 chart 的 directive, 但是我还想定义几个叫做 pie,bar 和 line 的 directive \n来作为 chart type='pie'|'bar'|'line' 的别名,这个时候想要动态获取一下 directive 来带入到一个生成 directive 的函数中.\n\n需要动态获得 directive 的 name,link 函数无法获取 directive 的name, 这个时候就可以使用compile 函数.\n\n```\ncompile: function(cElem, cAttrs, transclude) {\n      //get directive name\n      var name = this.name;\n      //link func\n      return function (scope, element, attrs) {\n          \n          //do somethin\n          myFunc(name)\n\n        });\n      }\n    }// end compile\n```\n\ncompile 函数定义就是会返回一个 link 函数,而 compile 的this 指针指向的就是 directive 对象.利用闭包就可以传递 name.\n\n需要注意的是当使用 compile 参数时, link 定义将会失效.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angular-directive","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skfea0004va0dh31467ln","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.</p>\n<p>页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.</p>\n<a id=\"more\"></a>\n<p>#directive 的定义</p>\n<p>参考<a href=\"https://docs.angularjs.org/guide/directive\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>定义一个 directive 的基本格式很简单,第一个参数是 directive 的 name, 第二个参数是一个函数,这个函数需要返回一个 object. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'my-customer.html'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>也可以写成依赖注入的数组形式.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(&apos;myCustomer&apos;, [$timeout, function($timeout)&#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    templateUrl: &apos;my-customer.html&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<p>directive 的 name 应当使用驼峰命名法,在 angularjs解析 html 时,以’:’,’-‘,’_’分割单词,和 data 或者 x 前缀都会被识别为对应 name 的 directive.</p>\n<p>但是如果中间没有分割,比如写成 ngModel 则无法识别出来. 这样处理的原因,可能是因为 html 对大小写不敏感.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;Controller&quot;&gt;</div><div class=\"line\">  Hello &lt;input ng-model=&apos;name&apos;&gt; &lt;hr/&gt;</div><div class=\"line\">  &lt;span ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span ng:bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span ng_bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span data-ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span x-ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>#directive 的参数配置</p>\n<p>在第二个参数中函数返回的 object 里定义directive 的配置.</p>\n<p>常见的参数有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">restrict: &apos;AEC&apos;,</div><div class=\"line\">* E - Element name (default): &lt;my-directive&gt;&lt;/my-directive&gt;</div><div class=\"line\">* A - Attribute (default): &lt;div my-directive=&quot;exp&quot;&gt;&lt;/div&gt;</div><div class=\"line\">* C - Class: &lt;div class=&quot;my-directive: exp;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">* M - Comment: &lt;!-- directive: my-directive exp --&gt;</div></pre></td></tr></table></figure>\n<p>是否替换掉原有的 directive 标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">replace: True/False</div></pre></td></tr></table></figure></p>\n<p>是否把标签的内部元素也传入 directive 进行处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">transclude: True/False</div></pre></td></tr></table></figure></p>\n<p>模板字符串/模板 url(只能使用其中一个参数)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">template:&quot;&quot;</div><div class=\"line\">template_url:&quot;&quot;</div></pre></td></tr></table></figure></p>\n<p>绑定行为(link/compile二选一)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: Object | function</div><div class=\"line\">compile: Object | function</div></pre></td></tr></table></figure>\n<p>完整的参数参考下述页面<br><a href=\"https://docs.angularjs.org/api/ng/service/$compile\" target=\"_blank\" rel=\"external\">$compile 页面</a></p>\n<p>##directive scope </p>\n<h3 id=\"继承-scope\"><a href=\"#继承-scope\" class=\"headerlink\" title=\"继承 scope\"></a>继承 scope</h3><p>scope 可以取三种值, true, false 和一个 Object{}</p>\n<p>当为 true 时,则继承 controller 的 scope, 通过访问 parent 来访问 controller 中的 scope, 所有修改都不会影响原有的 scope.</p>\n<p>为 false 时,直接使用当前的父 controller 的 scope, 会共享之间的修改.</p>\n<p>###isolated scope</p>\n<p>directive 虽然可以访问模块的 scope, 官方建议通过属性把值传递到directive 的isolated scope中.</p>\n<p>参考官方文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    restrict: &apos;E&apos;,</div><div class=\"line\">    scope: &#123;</div><div class=\"line\">      customerInfo: &apos;=info&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    templateUrl: &apos;my-customer-iso.html&apos;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-controller=&quot;Controller&quot;&gt;</div><div class=\"line\">  &lt;my-customer info=&quot;naomi&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">  &lt;my-customer info=&quot;igor&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>显示为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Name: Naomi Address: 1600 Amphitheatre</div><div class=\"line\">Name: Igor Address: 123 Somewhere</div></pre></td></tr></table></figure>\n<p>isolated scope 一共有以下几种传入方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;=&apos;  属性的值使用 angularjs 表达式计算</div><div class=\"line\">&apos;@&apos;  直接使用属性的字符串</div><div class=\"line\">&apos;&amp;&apos;  则是可以传递函数</div></pre></td></tr></table></figure></p>\n<h2 id=\"link-函数\"><a href=\"#link-函数\" class=\"headerlink\" title=\"link 函数\"></a>link 函数</h2><p>在 directive 生成模板的时候,需要一些额外处理,可以在 link 函数中处理.</p>\n<p>需要注意的是, link 函数调用的时候(Post-linking function), </p>\n<p>这个时候如果获取 template_url 中的元素,</p>\n<p>directive 是不一定完成渲染的,</p>\n<p>如果这个时候去取子元素,很可能得到的会是空值.</p>\n<p>要保证 post-link 里面可以获得子元素,应当使用 template 来作为模板的渲染.而不是一个 url.</p>\n<h4 id=\"如何保证在-directive-渲染完成后执行函数\"><a href=\"#如何保证在-directive-渲染完成后执行函数\" class=\"headerlink\" title=\"如何保证在 directive 渲染完成后执行函数\"></a>如何保证在 directive 渲染完成后执行函数</h4><p>实在不能避免使用 template_url 来定义模板,目前一种可行办法是使用$timeout service</p>\n<p>使用$timeout,这个 service, 当后面不带时间参数时,</p>\n<p>定义的回调函数将在 angularjs 渲染完成之后调用.</p>\n<p>相当于 jquery 的 document.ready()函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(&apos;myCustomer&apos;, [$timeout, function($timeout)&#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    templateUrl: &apos;my-customer.html&apos;,</div><div class=\"line\">    replace: true,</div><div class=\"line\">    link: function (scope, element, attrs) &#123;</div><div class=\"line\">      $timeout(function ()&#123;</div><div class=\"line\">        //do something when angularjs loaded</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<h2 id=\"实时更新-directive\"><a href=\"#实时更新-directive\" class=\"headerlink\" title=\"实时更新 directive\"></a>实时更新 directive</h2><p>默认 directive 只在生成的时候 link.</p>\n<p>需要实时更新则要使用 scope.watch,来检测 scope 的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function()&#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    templateUrl: &apos;my-customer.html&apos;,</div><div class=\"line\">    replace: true,</div><div class=\"line\">    link: function (scope, element, attrs) &#123;</div><div class=\"line\"></div><div class=\"line\">      scope.$watch(attrs.filter, function (newValue) &#123;</div><div class=\"line\">        //filter属性可能是用其他的 scope 中传递过来的值        </div><div class=\"line\">        scope.filter = newValue</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"如何动态获取-directive-的-name\"><a href=\"#如何动态获取-directive-的-name\" class=\"headerlink\" title=\"如何动态获取 directive 的 name\"></a>如何动态获取 directive 的 name</h2><p>比如定义了几个功能相似的 directive, 又不想用属性来区分,而是想要用 directive name 来区分.</p>\n<p>我定义了一个 chart 的 directive, 但是我还想定义几个叫做 pie,bar 和 line 的 directive<br>来作为 chart type=’pie’|’bar’|’line’ 的别名,这个时候想要动态获取一下 directive 来带入到一个生成 directive 的函数中.</p>\n<p>需要动态获得 directive 的 name,link 函数无法获取 directive 的name, 这个时候就可以使用compile 函数.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile: function(cElem, cAttrs, transclude) &#123;</div><div class=\"line\">      //get directive name</div><div class=\"line\">      var name = this.name;</div><div class=\"line\">      //link func</div><div class=\"line\">      return function (scope, element, attrs) &#123;</div><div class=\"line\">          </div><div class=\"line\">          //do somethin</div><div class=\"line\">          myFunc(name)</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;// end compile</div></pre></td></tr></table></figure>\n<p>compile 函数定义就是会返回一个 link 函数,而 compile 的this 指针指向的就是 directive 对象.利用闭包就可以传递 name.</p>\n<p>需要注意的是当使用 compile 参数时, link 定义将会失效.</p>\n","site":{"data":{}},"excerpt":"<p>最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.</p>\n<p>页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.</p>","more":"<p>#directive 的定义</p>\n<p>参考<a href=\"https://docs.angularjs.org/guide/directive\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>定义一个 directive 的基本格式很简单,第一个参数是 directive 的 name, 第二个参数是一个函数,这个函数需要返回一个 object. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'my-customer.html'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>也可以写成依赖注入的数组形式.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(&apos;myCustomer&apos;, [$timeout, function($timeout)&#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    templateUrl: &apos;my-customer.html&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<p>directive 的 name 应当使用驼峰命名法,在 angularjs解析 html 时,以’:’,’-‘,’_’分割单词,和 data 或者 x 前缀都会被识别为对应 name 的 directive.</p>\n<p>但是如果中间没有分割,比如写成 ngModel 则无法识别出来. 这样处理的原因,可能是因为 html 对大小写不敏感.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;Controller&quot;&gt;</div><div class=\"line\">  Hello &lt;input ng-model=&apos;name&apos;&gt; &lt;hr/&gt;</div><div class=\"line\">  &lt;span ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span ng:bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span ng_bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span data-ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">  &lt;span x-ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>#directive 的参数配置</p>\n<p>在第二个参数中函数返回的 object 里定义directive 的配置.</p>\n<p>常见的参数有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">restrict: &apos;AEC&apos;,</div><div class=\"line\">* E - Element name (default): &lt;my-directive&gt;&lt;/my-directive&gt;</div><div class=\"line\">* A - Attribute (default): &lt;div my-directive=&quot;exp&quot;&gt;&lt;/div&gt;</div><div class=\"line\">* C - Class: &lt;div class=&quot;my-directive: exp;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">* M - Comment: &lt;!-- directive: my-directive exp --&gt;</div></pre></td></tr></table></figure>\n<p>是否替换掉原有的 directive 标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">replace: True/False</div></pre></td></tr></table></figure></p>\n<p>是否把标签的内部元素也传入 directive 进行处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">transclude: True/False</div></pre></td></tr></table></figure></p>\n<p>模板字符串/模板 url(只能使用其中一个参数)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">template:&quot;&quot;</div><div class=\"line\">template_url:&quot;&quot;</div></pre></td></tr></table></figure></p>\n<p>绑定行为(link/compile二选一)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: Object | function</div><div class=\"line\">compile: Object | function</div></pre></td></tr></table></figure>\n<p>完整的参数参考下述页面<br><a href=\"https://docs.angularjs.org/api/ng/service/$compile\" target=\"_blank\" rel=\"external\">$compile 页面</a></p>\n<p>##directive scope </p>\n<h3 id=\"继承-scope\"><a href=\"#继承-scope\" class=\"headerlink\" title=\"继承 scope\"></a>继承 scope</h3><p>scope 可以取三种值, true, false 和一个 Object{}</p>\n<p>当为 true 时,则继承 controller 的 scope, 通过访问 parent 来访问 controller 中的 scope, 所有修改都不会影响原有的 scope.</p>\n<p>为 false 时,直接使用当前的父 controller 的 scope, 会共享之间的修改.</p>\n<p>###isolated scope</p>\n<p>directive 虽然可以访问模块的 scope, 官方建议通过属性把值传递到directive 的isolated scope中.</p>\n<p>参考官方文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    restrict: &apos;E&apos;,</div><div class=\"line\">    scope: &#123;</div><div class=\"line\">      customerInfo: &apos;=info&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    templateUrl: &apos;my-customer-iso.html&apos;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-controller=&quot;Controller&quot;&gt;</div><div class=\"line\">  &lt;my-customer info=&quot;naomi&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">  &lt;my-customer info=&quot;igor&quot;&gt;&lt;/my-customer&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>显示为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Name: Naomi Address: 1600 Amphitheatre</div><div class=\"line\">Name: Igor Address: 123 Somewhere</div></pre></td></tr></table></figure>\n<p>isolated scope 一共有以下几种传入方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;=&apos;  属性的值使用 angularjs 表达式计算</div><div class=\"line\">&apos;@&apos;  直接使用属性的字符串</div><div class=\"line\">&apos;&amp;&apos;  则是可以传递函数</div></pre></td></tr></table></figure></p>\n<h2 id=\"link-函数\"><a href=\"#link-函数\" class=\"headerlink\" title=\"link 函数\"></a>link 函数</h2><p>在 directive 生成模板的时候,需要一些额外处理,可以在 link 函数中处理.</p>\n<p>需要注意的是, link 函数调用的时候(Post-linking function), </p>\n<p>这个时候如果获取 template_url 中的元素,</p>\n<p>directive 是不一定完成渲染的,</p>\n<p>如果这个时候去取子元素,很可能得到的会是空值.</p>\n<p>要保证 post-link 里面可以获得子元素,应当使用 template 来作为模板的渲染.而不是一个 url.</p>\n<h4 id=\"如何保证在-directive-渲染完成后执行函数\"><a href=\"#如何保证在-directive-渲染完成后执行函数\" class=\"headerlink\" title=\"如何保证在 directive 渲染完成后执行函数\"></a>如何保证在 directive 渲染完成后执行函数</h4><p>实在不能避免使用 template_url 来定义模板,目前一种可行办法是使用$timeout service</p>\n<p>使用$timeout,这个 service, 当后面不带时间参数时,</p>\n<p>定义的回调函数将在 angularjs 渲染完成之后调用.</p>\n<p>相当于 jquery 的 document.ready()函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(&apos;myCustomer&apos;, [$timeout, function($timeout)&#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    templateUrl: &apos;my-customer.html&apos;,</div><div class=\"line\">    replace: true,</div><div class=\"line\">    link: function (scope, element, attrs) &#123;</div><div class=\"line\">      $timeout(function ()&#123;</div><div class=\"line\">        //do something when angularjs loaded</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<h2 id=\"实时更新-directive\"><a href=\"#实时更新-directive\" class=\"headerlink\" title=\"实时更新 directive\"></a>实时更新 directive</h2><p>默认 directive 只在生成的时候 link.</p>\n<p>需要实时更新则要使用 scope.watch,来检测 scope 的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.directive(&apos;myCustomer&apos;, function()&#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    templateUrl: &apos;my-customer.html&apos;,</div><div class=\"line\">    replace: true,</div><div class=\"line\">    link: function (scope, element, attrs) &#123;</div><div class=\"line\"></div><div class=\"line\">      scope.$watch(attrs.filter, function (newValue) &#123;</div><div class=\"line\">        //filter属性可能是用其他的 scope 中传递过来的值        </div><div class=\"line\">        scope.filter = newValue</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"如何动态获取-directive-的-name\"><a href=\"#如何动态获取-directive-的-name\" class=\"headerlink\" title=\"如何动态获取 directive 的 name\"></a>如何动态获取 directive 的 name</h2><p>比如定义了几个功能相似的 directive, 又不想用属性来区分,而是想要用 directive name 来区分.</p>\n<p>我定义了一个 chart 的 directive, 但是我还想定义几个叫做 pie,bar 和 line 的 directive<br>来作为 chart type=’pie’|’bar’|’line’ 的别名,这个时候想要动态获取一下 directive 来带入到一个生成 directive 的函数中.</p>\n<p>需要动态获得 directive 的 name,link 函数无法获取 directive 的name, 这个时候就可以使用compile 函数.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile: function(cElem, cAttrs, transclude) &#123;</div><div class=\"line\">      //get directive name</div><div class=\"line\">      var name = this.name;</div><div class=\"line\">      //link func</div><div class=\"line\">      return function (scope, element, attrs) &#123;</div><div class=\"line\">          </div><div class=\"line\">          //do somethin</div><div class=\"line\">          myFunc(name)</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;// end compile</div></pre></td></tr></table></figure>\n<p>compile 函数定义就是会返回一个 link 函数,而 compile 的this 指针指向的就是 directive 对象.利用闭包就可以传递 name.</p>\n<p>需要注意的是当使用 compile 参数时, link 定义将会失效.</p>"},{"title":"angularjs概览","date":"2017-03-06T15:34:39.000Z","_content":"\n用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.\n趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.\n\n<!--more-->\n\n#angularjs 基本概念\n\n* **双向绑定**\n\n双向绑定现在已经不是一个新概念,大部分时间我们不用考虑怎么去刷新 DOM, (妈妈再也不用担心我乱绑定事件而导致界面卡了)\n而主要去关心模型的变化,还有如何写 HTML 的表现.\n不过有时候里面混着一堆 angularjs 的语句看起来也挺蛋疼的.但相比后端套模板,你连输入的数据是什么都不知道还是要好一点的\n\n当然,当把刷新权交给了框架,还是要了解一下什么时候 angularjs 会刷新我们的界面,而什么时候不会刷新,需要我们手动触发刷新($scope.$apply),\n\n可以参考一下这篇文章 [AngularJS的scope.$apply](http://blog.gejiawen.com/2014/07/14/usage-for-angularjs-scope-apply/)\n\n* **依赖注入**\n\n依赖注入则更像是用一些奇技淫巧实现的js语法糖,来解决加载顺序的问题.以后有了 ES6 的import, 大概也就不需要了.\n\n* module\n\nmodule应该算是Angularjs最小逻辑结构.其他的组件和功能都是绑定在 module 上来实现的.\n\n一般来说一个页面只有一个 ng-app 作为该块级元素的主 module, 当然你也可以定义多个.可以参考 [multiple-ng-app-within-a-page](http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page).\n\n根据功能模块来划分不同 module, 绑定不同的 controller,directive,provide, 最后通过依赖注入,引用到主 module. \n\n当你习惯了 angularjs 的编程思路之后, 自然而然就实现了前端功能逻辑的解耦.\n\n[angularjs学习笔记 -- module]()\n\n* controller\n\n喜闻乐见的 mvc 中的我们最熟悉的老朋友,恩,对它就是封装各种对模型操作和各种交互的地方.\n\n也可能是我们一开始写代码时,容易写的最臃肿的地方.\n\n不过还有什么地方能够比 controller 更像垃圾堆的地方了嘛╮(╯▽╰)╭\n\n[angularjs学习笔记 -- controller]()\n\n* directive\n\ndirective 本身也可以封装一些独立的逻辑,作为一个逻辑组件.\n\n不过个人感觉它主要干的事情,是用来帮助我们解决一些重复的渲染,可以把它想象成一个 UI component 的封装.当然它能够做到的东西更多.\n\n另外我们常用的 ng-repeat,ng-if,ng-class 等等这些东西,都是angularjs 内建的 directive.\n\n[angularjs学习笔记 -- directive]()\n\n* provider(Service,Factory,Constant,Value等等)\n\n这块之前一直都是分开看的,一直到最近读了一篇文章才发现原来后面那些东西都是 provide 的一个特例.\n\n主要就是用于在 controller 之间共享一些对象,数据或者服务.\n\n因为是单例模型,所以可以保证数据的一致性.\n\nprovider的概念其实很绕,首先用 provider 方法定义的 provider, 可以用 config 方法,传入一个providerName 的 Provider 后缀的变量进行定制.\n\n是不是听的很头晕.\n\n可以参考官方的 provider, $http 和 $httpProvider. 官方文档里的 provider 指的是这些在 config 里面依赖注入的 Provider 变量,然而这其实只是 provider 的副产品.\n\n[angularjs学习笔记 -- provider]()\n\n* test\n\n分了这么多模块,功能清晰了,然而如果出了问题,那么多的文件,你要去哪里 debug 呢?\n\n所以模块化和单元测试是分不开的两兄弟.\n\n不写单元测试的程序员,不是一个好美术~~\n\nangularjs 的测试模块也是非常强大,不仅有模块的 BDD 单元测试, 还直接集成了Browser 的 E2E 测试.\n\n[angularjs学习笔记 -- Jusmine和 单元测试]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/angular-main.md","raw":"title: angularjs概览\ndate: 2017-03-06 23:34:39\ntags:\n- angularjs\n- 前端\n---\n\n用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.\n趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.\n\n<!--more-->\n\n#angularjs 基本概念\n\n* **双向绑定**\n\n双向绑定现在已经不是一个新概念,大部分时间我们不用考虑怎么去刷新 DOM, (妈妈再也不用担心我乱绑定事件而导致界面卡了)\n而主要去关心模型的变化,还有如何写 HTML 的表现.\n不过有时候里面混着一堆 angularjs 的语句看起来也挺蛋疼的.但相比后端套模板,你连输入的数据是什么都不知道还是要好一点的\n\n当然,当把刷新权交给了框架,还是要了解一下什么时候 angularjs 会刷新我们的界面,而什么时候不会刷新,需要我们手动触发刷新($scope.$apply),\n\n可以参考一下这篇文章 [AngularJS的scope.$apply](http://blog.gejiawen.com/2014/07/14/usage-for-angularjs-scope-apply/)\n\n* **依赖注入**\n\n依赖注入则更像是用一些奇技淫巧实现的js语法糖,来解决加载顺序的问题.以后有了 ES6 的import, 大概也就不需要了.\n\n* module\n\nmodule应该算是Angularjs最小逻辑结构.其他的组件和功能都是绑定在 module 上来实现的.\n\n一般来说一个页面只有一个 ng-app 作为该块级元素的主 module, 当然你也可以定义多个.可以参考 [multiple-ng-app-within-a-page](http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page).\n\n根据功能模块来划分不同 module, 绑定不同的 controller,directive,provide, 最后通过依赖注入,引用到主 module. \n\n当你习惯了 angularjs 的编程思路之后, 自然而然就实现了前端功能逻辑的解耦.\n\n[angularjs学习笔记 -- module]()\n\n* controller\n\n喜闻乐见的 mvc 中的我们最熟悉的老朋友,恩,对它就是封装各种对模型操作和各种交互的地方.\n\n也可能是我们一开始写代码时,容易写的最臃肿的地方.\n\n不过还有什么地方能够比 controller 更像垃圾堆的地方了嘛╮(╯▽╰)╭\n\n[angularjs学习笔记 -- controller]()\n\n* directive\n\ndirective 本身也可以封装一些独立的逻辑,作为一个逻辑组件.\n\n不过个人感觉它主要干的事情,是用来帮助我们解决一些重复的渲染,可以把它想象成一个 UI component 的封装.当然它能够做到的东西更多.\n\n另外我们常用的 ng-repeat,ng-if,ng-class 等等这些东西,都是angularjs 内建的 directive.\n\n[angularjs学习笔记 -- directive]()\n\n* provider(Service,Factory,Constant,Value等等)\n\n这块之前一直都是分开看的,一直到最近读了一篇文章才发现原来后面那些东西都是 provide 的一个特例.\n\n主要就是用于在 controller 之间共享一些对象,数据或者服务.\n\n因为是单例模型,所以可以保证数据的一致性.\n\nprovider的概念其实很绕,首先用 provider 方法定义的 provider, 可以用 config 方法,传入一个providerName 的 Provider 后缀的变量进行定制.\n\n是不是听的很头晕.\n\n可以参考官方的 provider, $http 和 $httpProvider. 官方文档里的 provider 指的是这些在 config 里面依赖注入的 Provider 变量,然而这其实只是 provider 的副产品.\n\n[angularjs学习笔记 -- provider]()\n\n* test\n\n分了这么多模块,功能清晰了,然而如果出了问题,那么多的文件,你要去哪里 debug 呢?\n\n所以模块化和单元测试是分不开的两兄弟.\n\n不写单元测试的程序员,不是一个好美术~~\n\nangularjs 的测试模块也是非常强大,不仅有模块的 BDD 单元测试, 还直接集成了Browser 的 E2E 测试.\n\n[angularjs学习笔记 -- Jusmine和 单元测试]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angular-main","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skfec0005va0d66dlph46","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.<br>趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.</p>\n<a id=\"more\"></a>\n<p>#angularjs 基本概念</p>\n<ul>\n<li><strong>双向绑定</strong></li>\n</ul>\n<p>双向绑定现在已经不是一个新概念,大部分时间我们不用考虑怎么去刷新 DOM, (妈妈再也不用担心我乱绑定事件而导致界面卡了)<br>而主要去关心模型的变化,还有如何写 HTML 的表现.<br>不过有时候里面混着一堆 angularjs 的语句看起来也挺蛋疼的.但相比后端套模板,你连输入的数据是什么都不知道还是要好一点的</p>\n<p>当然,当把刷新权交给了框架,还是要了解一下什么时候 angularjs 会刷新我们的界面,而什么时候不会刷新,需要我们手动触发刷新($scope.$apply),</p>\n<p>可以参考一下这篇文章 <a href=\"http://blog.gejiawen.com/2014/07/14/usage-for-angularjs-scope-apply/\" target=\"_blank\" rel=\"external\">AngularJS的scope.$apply</a></p>\n<ul>\n<li><strong>依赖注入</strong></li>\n</ul>\n<p>依赖注入则更像是用一些奇技淫巧实现的js语法糖,来解决加载顺序的问题.以后有了 ES6 的import, 大概也就不需要了.</p>\n<ul>\n<li>module</li>\n</ul>\n<p>module应该算是Angularjs最小逻辑结构.其他的组件和功能都是绑定在 module 上来实现的.</p>\n<p>一般来说一个页面只有一个 ng-app 作为该块级元素的主 module, 当然你也可以定义多个.可以参考 <a href=\"http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page\" target=\"_blank\" rel=\"external\">multiple-ng-app-within-a-page</a>.</p>\n<p>根据功能模块来划分不同 module, 绑定不同的 controller,directive,provide, 最后通过依赖注入,引用到主 module. </p>\n<p>当你习惯了 angularjs 的编程思路之后, 自然而然就实现了前端功能逻辑的解耦.</p>\n<p><a href=\"\">angularjs学习笔记 – module</a></p>\n<ul>\n<li>controller</li>\n</ul>\n<p>喜闻乐见的 mvc 中的我们最熟悉的老朋友,恩,对它就是封装各种对模型操作和各种交互的地方.</p>\n<p>也可能是我们一开始写代码时,容易写的最臃肿的地方.</p>\n<p>不过还有什么地方能够比 controller 更像垃圾堆的地方了嘛╮(╯▽╰)╭</p>\n<p><a href=\"\">angularjs学习笔记 – controller</a></p>\n<ul>\n<li>directive</li>\n</ul>\n<p>directive 本身也可以封装一些独立的逻辑,作为一个逻辑组件.</p>\n<p>不过个人感觉它主要干的事情,是用来帮助我们解决一些重复的渲染,可以把它想象成一个 UI component 的封装.当然它能够做到的东西更多.</p>\n<p>另外我们常用的 ng-repeat,ng-if,ng-class 等等这些东西,都是angularjs 内建的 directive.</p>\n<p><a href=\"\">angularjs学习笔记 – directive</a></p>\n<ul>\n<li>provider(Service,Factory,Constant,Value等等)</li>\n</ul>\n<p>这块之前一直都是分开看的,一直到最近读了一篇文章才发现原来后面那些东西都是 provide 的一个特例.</p>\n<p>主要就是用于在 controller 之间共享一些对象,数据或者服务.</p>\n<p>因为是单例模型,所以可以保证数据的一致性.</p>\n<p>provider的概念其实很绕,首先用 provider 方法定义的 provider, 可以用 config 方法,传入一个providerName 的 Provider 后缀的变量进行定制.</p>\n<p>是不是听的很头晕.</p>\n<p>可以参考官方的 provider, $http 和 $httpProvider. 官方文档里的 provider 指的是这些在 config 里面依赖注入的 Provider 变量,然而这其实只是 provider 的副产品.</p>\n<p><a href=\"\">angularjs学习笔记 – provider</a></p>\n<ul>\n<li>test</li>\n</ul>\n<p>分了这么多模块,功能清晰了,然而如果出了问题,那么多的文件,你要去哪里 debug 呢?</p>\n<p>所以模块化和单元测试是分不开的两兄弟.</p>\n<p>不写单元测试的程序员,不是一个好美术~~</p>\n<p>angularjs 的测试模块也是非常强大,不仅有模块的 BDD 单元测试, 还直接集成了Browser 的 E2E 测试.</p>\n<p><a href=\"\">angularjs学习笔记 – Jusmine和 单元测试</a></p>\n","site":{"data":{}},"excerpt":"<p>用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.<br>趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.</p>","more":"<p>#angularjs 基本概念</p>\n<ul>\n<li><strong>双向绑定</strong></li>\n</ul>\n<p>双向绑定现在已经不是一个新概念,大部分时间我们不用考虑怎么去刷新 DOM, (妈妈再也不用担心我乱绑定事件而导致界面卡了)<br>而主要去关心模型的变化,还有如何写 HTML 的表现.<br>不过有时候里面混着一堆 angularjs 的语句看起来也挺蛋疼的.但相比后端套模板,你连输入的数据是什么都不知道还是要好一点的</p>\n<p>当然,当把刷新权交给了框架,还是要了解一下什么时候 angularjs 会刷新我们的界面,而什么时候不会刷新,需要我们手动触发刷新($scope.$apply),</p>\n<p>可以参考一下这篇文章 <a href=\"http://blog.gejiawen.com/2014/07/14/usage-for-angularjs-scope-apply/\" target=\"_blank\" rel=\"external\">AngularJS的scope.$apply</a></p>\n<ul>\n<li><strong>依赖注入</strong></li>\n</ul>\n<p>依赖注入则更像是用一些奇技淫巧实现的js语法糖,来解决加载顺序的问题.以后有了 ES6 的import, 大概也就不需要了.</p>\n<ul>\n<li>module</li>\n</ul>\n<p>module应该算是Angularjs最小逻辑结构.其他的组件和功能都是绑定在 module 上来实现的.</p>\n<p>一般来说一个页面只有一个 ng-app 作为该块级元素的主 module, 当然你也可以定义多个.可以参考 <a href=\"http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page\" target=\"_blank\" rel=\"external\">multiple-ng-app-within-a-page</a>.</p>\n<p>根据功能模块来划分不同 module, 绑定不同的 controller,directive,provide, 最后通过依赖注入,引用到主 module. </p>\n<p>当你习惯了 angularjs 的编程思路之后, 自然而然就实现了前端功能逻辑的解耦.</p>\n<p><a href=\"\">angularjs学习笔记 – module</a></p>\n<ul>\n<li>controller</li>\n</ul>\n<p>喜闻乐见的 mvc 中的我们最熟悉的老朋友,恩,对它就是封装各种对模型操作和各种交互的地方.</p>\n<p>也可能是我们一开始写代码时,容易写的最臃肿的地方.</p>\n<p>不过还有什么地方能够比 controller 更像垃圾堆的地方了嘛╮(╯▽╰)╭</p>\n<p><a href=\"\">angularjs学习笔记 – controller</a></p>\n<ul>\n<li>directive</li>\n</ul>\n<p>directive 本身也可以封装一些独立的逻辑,作为一个逻辑组件.</p>\n<p>不过个人感觉它主要干的事情,是用来帮助我们解决一些重复的渲染,可以把它想象成一个 UI component 的封装.当然它能够做到的东西更多.</p>\n<p>另外我们常用的 ng-repeat,ng-if,ng-class 等等这些东西,都是angularjs 内建的 directive.</p>\n<p><a href=\"\">angularjs学习笔记 – directive</a></p>\n<ul>\n<li>provider(Service,Factory,Constant,Value等等)</li>\n</ul>\n<p>这块之前一直都是分开看的,一直到最近读了一篇文章才发现原来后面那些东西都是 provide 的一个特例.</p>\n<p>主要就是用于在 controller 之间共享一些对象,数据或者服务.</p>\n<p>因为是单例模型,所以可以保证数据的一致性.</p>\n<p>provider的概念其实很绕,首先用 provider 方法定义的 provider, 可以用 config 方法,传入一个providerName 的 Provider 后缀的变量进行定制.</p>\n<p>是不是听的很头晕.</p>\n<p>可以参考官方的 provider, $http 和 $httpProvider. 官方文档里的 provider 指的是这些在 config 里面依赖注入的 Provider 变量,然而这其实只是 provider 的副产品.</p>\n<p><a href=\"\">angularjs学习笔记 – provider</a></p>\n<ul>\n<li>test</li>\n</ul>\n<p>分了这么多模块,功能清晰了,然而如果出了问题,那么多的文件,你要去哪里 debug 呢?</p>\n<p>所以模块化和单元测试是分不开的两兄弟.</p>\n<p>不写单元测试的程序员,不是一个好美术~~</p>\n<p>angularjs 的测试模块也是非常强大,不仅有模块的 BDD 单元测试, 还直接集成了Browser 的 E2E 测试.</p>\n<p><a href=\"\">angularjs学习笔记 – Jusmine和 单元测试</a></p>"},{"title":"angularjs学习笔记 -- module","date":"2017-03-20T16:33:31.000Z","_content":"\nmodule 是 angularjs 里面用来组织功能的一个集合.\n\n可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.\n\n我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.\n\n<!--more-->\n\n## 1.entry point\n\n如同大部分程序都会有一个 main 函数.或者说像使用 browserfy 打包也需要一个 main.js. \n\n同样我们也需要一个 main module,作为我们 app 的入口.\n\n这个 main module 是使用 ng-app 来定义的.\n\n```javascript\n\n<div ng-app=\"myApp\">\n  <div>\n    {{ 'World' || greet }}\n  </div>\n</div>\n\n```\n\n这样 angularjs 就会从这个对应 ng-app 名称的 module 开始加载我们的模块.通过层层的依赖注入,初始化各个模块,各个 service, 然后生成虚拟 dom, 渲染我们的页面.\n\n## 2.run 和 config\n\nmodule除了常见的使用.链式操作来定义自己的 Service, Controller, Directive, Filter等等,主要就有额外的两个方法.\n\nconfig 和 run\n\n**run**\n\nrun 函数很容易理解,它就是 module 开始初始化时调用的函数,相当于 init 函数.在这里我们可以为我们的模块进行一些初始化的功能.需要注意的是,在 run 函数调用时所有的 provider (Service,Constant,Filter,Provider等等) 是已经初始化好了的.\n\n所以可以直接使用以来注入,来使用 service 中提供的方法或者类.\n\n比如官方的这个例子\n```javascript\n\nangular.module('xmpl.service', [])\n\n  .value('greeter', {\n    salutation: 'Hello',\n    localize: function(localization) {\n      this.salutation = localization.salutation;\n    },\n    greet: function(name) {\n      return this.salutation + ' ' + name + '!';\n    }\n  })\n\n  .value('user', {\n    load: function(name) {\n      this.name = name;\n    }\n  });\n\nangular.module('xmpl.directive', []);\n\nangular.module('xmpl.filter', []);\n\nangular.module('xmpl', ['xmpl.service', 'xmpl.directive', 'xmpl.filter'])\n\n  .run(function(greeter, user) {\n    // This is effectively part of the main method initialization code\n    greeter.localize({\n      salutation: 'Bonjour'\n    });\n    user.load('World');\n  })\n\n  .controller('XmplController', function($scope, greeter, user) {\n    $scope.greeting = greeter.greet(user.name);\n  });\n```\n\n**config**\n\nconfig 方法则调用的更早,是在各种 provide 初始化的时候,对 provider 进行配置.\n\n也可以通过注入 $provide, $compileProvider, $filterProvider几个官方 provider 来注册 provider.\n\n这句话很绕,这三个以来注入的官方功能也是一个 provider.用这个 provider 可以给模块直接注册更多的 provider.\n\n比如官方文档这里的例子\n\n```javascript\n\nangular.module('myModule', []).\n  value('a', 123).\n  factory('a', function() { return 123; }).\n  directive('directiveName', ...).\n  filter('filterName', ...);\n\n// is same as\n\nangular.module('myModule', []).\n  config(function($provide, $compileProvider, $filterProvider) {\n    $provide.value('a', 123);\n    $provide.factory('a', function() { return 123; });\n    $compileProvider.directive('directiveName', ...);\n    $filterProvider.register('filterName', ...);\n  });\n```\n\n这两种方法是等价的.\n\nangularjs中一个模块的加载顺序大致是这样\n\n```\n1. app.config()\n2. provider.$get\n3. app.run()\n4. directive's compile functions (if they are found in the dom)\n5. app.controller()\n6. directive's link functions (again, if found)\n\n```\n\nconfig 更主要的作用就是 config provider.(是否感觉我又手抽了),因为 config 方法调用是在 provider 初始化($get)之前,所以可以在 config 方法中修改一些provider初始变量,来达到配置 provider 表现的目的.\n\n\nprovider 估计是 angularjs 里面最容易绕晕的概念,然而不用怕,下面这篇文章会带你完整揭开 provider 的面纱(大概).\n\n[angularjs学习笔记 -- provider]()\n\n\n> 附录\n\n> [angularjs总览](/2017/03/06/angular-main/)\n\n\n\n","source":"_posts/angular-module.md","raw":"title: angularjs学习笔记 -- module\ndate: 2017-03-21 00:33:31\ntags:\n- angularjs\n- 前端\n---\n\nmodule 是 angularjs 里面用来组织功能的一个集合.\n\n可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.\n\n我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.\n\n<!--more-->\n\n## 1.entry point\n\n如同大部分程序都会有一个 main 函数.或者说像使用 browserfy 打包也需要一个 main.js. \n\n同样我们也需要一个 main module,作为我们 app 的入口.\n\n这个 main module 是使用 ng-app 来定义的.\n\n```javascript\n\n<div ng-app=\"myApp\">\n  <div>\n    {{ 'World' || greet }}\n  </div>\n</div>\n\n```\n\n这样 angularjs 就会从这个对应 ng-app 名称的 module 开始加载我们的模块.通过层层的依赖注入,初始化各个模块,各个 service, 然后生成虚拟 dom, 渲染我们的页面.\n\n## 2.run 和 config\n\nmodule除了常见的使用.链式操作来定义自己的 Service, Controller, Directive, Filter等等,主要就有额外的两个方法.\n\nconfig 和 run\n\n**run**\n\nrun 函数很容易理解,它就是 module 开始初始化时调用的函数,相当于 init 函数.在这里我们可以为我们的模块进行一些初始化的功能.需要注意的是,在 run 函数调用时所有的 provider (Service,Constant,Filter,Provider等等) 是已经初始化好了的.\n\n所以可以直接使用以来注入,来使用 service 中提供的方法或者类.\n\n比如官方的这个例子\n```javascript\n\nangular.module('xmpl.service', [])\n\n  .value('greeter', {\n    salutation: 'Hello',\n    localize: function(localization) {\n      this.salutation = localization.salutation;\n    },\n    greet: function(name) {\n      return this.salutation + ' ' + name + '!';\n    }\n  })\n\n  .value('user', {\n    load: function(name) {\n      this.name = name;\n    }\n  });\n\nangular.module('xmpl.directive', []);\n\nangular.module('xmpl.filter', []);\n\nangular.module('xmpl', ['xmpl.service', 'xmpl.directive', 'xmpl.filter'])\n\n  .run(function(greeter, user) {\n    // This is effectively part of the main method initialization code\n    greeter.localize({\n      salutation: 'Bonjour'\n    });\n    user.load('World');\n  })\n\n  .controller('XmplController', function($scope, greeter, user) {\n    $scope.greeting = greeter.greet(user.name);\n  });\n```\n\n**config**\n\nconfig 方法则调用的更早,是在各种 provide 初始化的时候,对 provider 进行配置.\n\n也可以通过注入 $provide, $compileProvider, $filterProvider几个官方 provider 来注册 provider.\n\n这句话很绕,这三个以来注入的官方功能也是一个 provider.用这个 provider 可以给模块直接注册更多的 provider.\n\n比如官方文档这里的例子\n\n```javascript\n\nangular.module('myModule', []).\n  value('a', 123).\n  factory('a', function() { return 123; }).\n  directive('directiveName', ...).\n  filter('filterName', ...);\n\n// is same as\n\nangular.module('myModule', []).\n  config(function($provide, $compileProvider, $filterProvider) {\n    $provide.value('a', 123);\n    $provide.factory('a', function() { return 123; });\n    $compileProvider.directive('directiveName', ...);\n    $filterProvider.register('filterName', ...);\n  });\n```\n\n这两种方法是等价的.\n\nangularjs中一个模块的加载顺序大致是这样\n\n```\n1. app.config()\n2. provider.$get\n3. app.run()\n4. directive's compile functions (if they are found in the dom)\n5. app.controller()\n6. directive's link functions (again, if found)\n\n```\n\nconfig 更主要的作用就是 config provider.(是否感觉我又手抽了),因为 config 方法调用是在 provider 初始化($get)之前,所以可以在 config 方法中修改一些provider初始变量,来达到配置 provider 表现的目的.\n\n\nprovider 估计是 angularjs 里面最容易绕晕的概念,然而不用怕,下面这篇文章会带你完整揭开 provider 的面纱(大概).\n\n[angularjs学习笔记 -- provider]()\n\n\n> 附录\n\n> [angularjs总览](/2017/03/06/angular-main/)\n\n\n\n","slug":"angular-module","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skfef0006va0ddtjpuk1o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>module 是 angularjs 里面用来组织功能的一个集合.</p>\n<p>可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.</p>\n<p>我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.</p>\n<a id=\"more\"></a>\n<h2 id=\"1-entry-point\"><a href=\"#1-entry-point\" class=\"headerlink\" title=\"1.entry point\"></a>1.entry point</h2><p>如同大部分程序都会有一个 main 函数.或者说像使用 browserfy 打包也需要一个 main.js. </p>\n<p>同样我们也需要一个 main module,作为我们 app 的入口.</p>\n<p>这个 main module 是使用 ng-app 来定义的.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;div ng-app=<span class=\"string\">\"myApp\"</span>&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &#123;&#123; 'World' || greet &#125;&#125;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<p>这样 angularjs 就会从这个对应 ng-app 名称的 module 开始加载我们的模块.通过层层的依赖注入,初始化各个模块,各个 service, 然后生成虚拟 dom, 渲染我们的页面.</p>\n<h2 id=\"2-run-和-config\"><a href=\"#2-run-和-config\" class=\"headerlink\" title=\"2.run 和 config\"></a>2.run 和 config</h2><p>module除了常见的使用.链式操作来定义自己的 Service, Controller, Directive, Filter等等,主要就有额外的两个方法.</p>\n<p>config 和 run</p>\n<p><strong>run</strong></p>\n<p>run 函数很容易理解,它就是 module 开始初始化时调用的函数,相当于 init 函数.在这里我们可以为我们的模块进行一些初始化的功能.需要注意的是,在 run 函数调用时所有的 provider (Service,Constant,Filter,Provider等等) 是已经初始化好了的.</p>\n<p>所以可以直接使用以来注入,来使用 service 中提供的方法或者类.</p>\n<p>比如官方的这个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.service'</span>, [])</div><div class=\"line\"></div><div class=\"line\">  .value(<span class=\"string\">'greeter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">salutation</span>: <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    <span class=\"attr\">localize</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">localization</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.salutation = localization.salutation;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salutation + <span class=\"string\">' '</span> + name + <span class=\"string\">'!'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .value(<span class=\"string\">'user'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">load</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.directive'</span>, []);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.filter'</span>, []);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl'</span>, [<span class=\"string\">'xmpl.service'</span>, <span class=\"string\">'xmpl.directive'</span>, <span class=\"string\">'xmpl.filter'</span>])</div><div class=\"line\"></div><div class=\"line\">  .run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeter, user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// This is effectively part of the main method initialization code</span></div><div class=\"line\">    greeter.localize(&#123;</div><div class=\"line\">      <span class=\"attr\">salutation</span>: <span class=\"string\">'Bonjour'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    user.load(<span class=\"string\">'World'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .controller(<span class=\"string\">'XmplController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter, user</span>) </span>&#123;</div><div class=\"line\">    $scope.greeting = greeter.greet(user.name);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>config</strong></p>\n<p>config 方法则调用的更早,是在各种 provide 初始化的时候,对 provider 进行配置.</p>\n<p>也可以通过注入 $provide, $compileProvider, $filterProvider几个官方 provider 来注册 provider.</p>\n<p>这句话很绕,这三个以来注入的官方功能也是一个 provider.用这个 provider 可以给模块直接注册更多的 provider.</p>\n<p>比如官方文档这里的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myModule'</span>, []).</div><div class=\"line\">  value(<span class=\"string\">'a'</span>, <span class=\"number\">123</span>).</div><div class=\"line\">  factory(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">123</span>; &#125;).</div><div class=\"line\">  directive(<span class=\"string\">'directiveName'</span>, ...).</div><div class=\"line\">  filter(<span class=\"string\">'filterName'</span>, ...);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is same as</span></div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myModule'</span>, []).</div><div class=\"line\">  config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$provide, $compileProvider, $filterProvider</span>) </span>&#123;</div><div class=\"line\">    $provide.value(<span class=\"string\">'a'</span>, <span class=\"number\">123</span>);</div><div class=\"line\">    $provide.factory(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">123</span>; &#125;);</div><div class=\"line\">    $compileProvider.directive(<span class=\"string\">'directiveName'</span>, ...);</div><div class=\"line\">    $filterProvider.register(<span class=\"string\">'filterName'</span>, ...);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这两种方法是等价的.</p>\n<p>angularjs中一个模块的加载顺序大致是这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. app.config()</div><div class=\"line\">2. provider.$get</div><div class=\"line\">3. app.run()</div><div class=\"line\">4. directive&apos;s compile functions (if they are found in the dom)</div><div class=\"line\">5. app.controller()</div><div class=\"line\">6. directive&apos;s link functions (again, if found)</div></pre></td></tr></table></figure>\n<p>config 更主要的作用就是 config provider.(是否感觉我又手抽了),因为 config 方法调用是在 provider 初始化($get)之前,所以可以在 config 方法中修改一些provider初始变量,来达到配置 provider 表现的目的.</p>\n<p>provider 估计是 angularjs 里面最容易绕晕的概念,然而不用怕,下面这篇文章会带你完整揭开 provider 的面纱(大概).</p>\n<p><a href=\"\">angularjs学习笔记 – provider</a></p>\n<blockquote>\n<p>附录</p>\n<p><a href=\"/2017/03/06/angular-main/\">angularjs总览</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>module 是 angularjs 里面用来组织功能的一个集合.</p>\n<p>可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.</p>\n<p>我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.</p>","more":"<h2 id=\"1-entry-point\"><a href=\"#1-entry-point\" class=\"headerlink\" title=\"1.entry point\"></a>1.entry point</h2><p>如同大部分程序都会有一个 main 函数.或者说像使用 browserfy 打包也需要一个 main.js. </p>\n<p>同样我们也需要一个 main module,作为我们 app 的入口.</p>\n<p>这个 main module 是使用 ng-app 来定义的.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;div ng-app=<span class=\"string\">\"myApp\"</span>&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &#123;&#123; 'World' || greet &#125;&#125;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<p>这样 angularjs 就会从这个对应 ng-app 名称的 module 开始加载我们的模块.通过层层的依赖注入,初始化各个模块,各个 service, 然后生成虚拟 dom, 渲染我们的页面.</p>\n<h2 id=\"2-run-和-config\"><a href=\"#2-run-和-config\" class=\"headerlink\" title=\"2.run 和 config\"></a>2.run 和 config</h2><p>module除了常见的使用.链式操作来定义自己的 Service, Controller, Directive, Filter等等,主要就有额外的两个方法.</p>\n<p>config 和 run</p>\n<p><strong>run</strong></p>\n<p>run 函数很容易理解,它就是 module 开始初始化时调用的函数,相当于 init 函数.在这里我们可以为我们的模块进行一些初始化的功能.需要注意的是,在 run 函数调用时所有的 provider (Service,Constant,Filter,Provider等等) 是已经初始化好了的.</p>\n<p>所以可以直接使用以来注入,来使用 service 中提供的方法或者类.</p>\n<p>比如官方的这个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.service'</span>, [])</div><div class=\"line\"></div><div class=\"line\">  .value(<span class=\"string\">'greeter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">salutation</span>: <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    <span class=\"attr\">localize</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">localization</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.salutation = localization.salutation;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salutation + <span class=\"string\">' '</span> + name + <span class=\"string\">'!'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .value(<span class=\"string\">'user'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">load</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.directive'</span>, []);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.filter'</span>, []);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl'</span>, [<span class=\"string\">'xmpl.service'</span>, <span class=\"string\">'xmpl.directive'</span>, <span class=\"string\">'xmpl.filter'</span>])</div><div class=\"line\"></div><div class=\"line\">  .run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeter, user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// This is effectively part of the main method initialization code</span></div><div class=\"line\">    greeter.localize(&#123;</div><div class=\"line\">      <span class=\"attr\">salutation</span>: <span class=\"string\">'Bonjour'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    user.load(<span class=\"string\">'World'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .controller(<span class=\"string\">'XmplController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, greeter, user</span>) </span>&#123;</div><div class=\"line\">    $scope.greeting = greeter.greet(user.name);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>config</strong></p>\n<p>config 方法则调用的更早,是在各种 provide 初始化的时候,对 provider 进行配置.</p>\n<p>也可以通过注入 $provide, $compileProvider, $filterProvider几个官方 provider 来注册 provider.</p>\n<p>这句话很绕,这三个以来注入的官方功能也是一个 provider.用这个 provider 可以给模块直接注册更多的 provider.</p>\n<p>比如官方文档这里的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myModule'</span>, []).</div><div class=\"line\">  value(<span class=\"string\">'a'</span>, <span class=\"number\">123</span>).</div><div class=\"line\">  factory(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">123</span>; &#125;).</div><div class=\"line\">  directive(<span class=\"string\">'directiveName'</span>, ...).</div><div class=\"line\">  filter(<span class=\"string\">'filterName'</span>, ...);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is same as</span></div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myModule'</span>, []).</div><div class=\"line\">  config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$provide, $compileProvider, $filterProvider</span>) </span>&#123;</div><div class=\"line\">    $provide.value(<span class=\"string\">'a'</span>, <span class=\"number\">123</span>);</div><div class=\"line\">    $provide.factory(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">123</span>; &#125;);</div><div class=\"line\">    $compileProvider.directive(<span class=\"string\">'directiveName'</span>, ...);</div><div class=\"line\">    $filterProvider.register(<span class=\"string\">'filterName'</span>, ...);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p>这两种方法是等价的.</p>\n<p>angularjs中一个模块的加载顺序大致是这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. app.config()</div><div class=\"line\">2. provider.$get</div><div class=\"line\">3. app.run()</div><div class=\"line\">4. directive&apos;s compile functions (if they are found in the dom)</div><div class=\"line\">5. app.controller()</div><div class=\"line\">6. directive&apos;s link functions (again, if found)</div></pre></td></tr></table></figure>\n<p>config 更主要的作用就是 config provider.(是否感觉我又手抽了),因为 config 方法调用是在 provider 初始化($get)之前,所以可以在 config 方法中修改一些provider初始变量,来达到配置 provider 表现的目的.</p>\n<p>provider 估计是 angularjs 里面最容易绕晕的概念,然而不用怕,下面这篇文章会带你完整揭开 provider 的面纱(大概).</p>\n<p><a href=\"\">angularjs学习笔记 – provider</a></p>\n<blockquote>\n<p>附录</p>\n<p><a href=\"/2017/03/06/angular-main/\">angularjs总览</a></p>\n</blockquote>"},{"title":"angularjs学习笔记 -- provider","date":"2017-03-20T17:13:53.000Z","_content":"\n\nconstant\nfactory\nprovider\n\n\n\n","source":"_posts/angular-provider.md","raw":"title: angularjs学习笔记 -- provider\ndate: 2017-03-21 01:13:53\ntags:\n- angularjs\n- 前端\n---\n\n\nconstant\nfactory\nprovider\n\n\n\n","slug":"angular-provider","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skfej0008va0dte8fzr5r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>constant<br>factory<br>provider</p>\n","site":{"data":{}},"excerpt":"","more":"<p>constant<br>factory<br>provider</p>\n"},{"title":"第一篇博客","date":"2015-02-05T13:55:03.000Z","_content":"\n\n\n忙活了半天，终于搞定了。\n\n\n[hexo](http://hexo.io/docs/) 真的是一个非常好用的静态博客系统。\n\n评论到部署都非常方便，不需要多少编程基础就可以搞定。\n\n<!--more-->\n\n#关于 DISQUE 配置\n\n1.注册 diqus 账号,然后点击右上角进入 admin 页面 [https://disqus.com/admin/]\n2.在左边 Your Site 添加一个站点.\n3.需要生成一个 disqus 的短地址,这里生成的就是你的 disqus shortname ,加入到你站点中 _config.yml\n的 shortname 就可以自动生成 disqus 评论了.\n4.如果你忘记了 shortname 可以在 site的 setting 中的 Basic 标签页中查看.\n\n#关于 git 部署\n\n其实可以不用官方插件,最后静态文件都生成在 public 目录里.\n把 public 目录的内容都push到你的 github-page 资源库的根目录就可以了.\n手写个脚本也可以一键部署\n\n#关于自定义主题\n\n_partial中的代码只是为了结构化,主界面主要是 layout 下面的7个页面,其中部分可以缺省.\n每个页面文件对应一个链接.\n\n最基础的是 index(主页) 和 post(文章)\n\njs 和 css 则加在 layout 同级的 source 目录就可以.\n\n目录的索引以 source 为模板的当前目录,相对路径直接从这里写起就可以\n\n另外还是 swig 的模板阅读方便点, ejs 实在看得有点累\n\n- - -\n\n**参考** \n\n[更换博客系统——从jekyll到hexo](http://zhaofei.tk/2014/11/30/jekyll_to_hexo/)\n[hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n[Hexo 3.0 靜態博客使用指南](http://ippotsuko.com/build-your-hexo-blog-3/)\n","source":"_posts/doc1.md","raw":"title: 第一篇博客\ndate: 2015-02-05 21:55:03\ntags:\n---\n\n\n\n忙活了半天，终于搞定了。\n\n\n[hexo](http://hexo.io/docs/) 真的是一个非常好用的静态博客系统。\n\n评论到部署都非常方便，不需要多少编程基础就可以搞定。\n\n<!--more-->\n\n#关于 DISQUE 配置\n\n1.注册 diqus 账号,然后点击右上角进入 admin 页面 [https://disqus.com/admin/]\n2.在左边 Your Site 添加一个站点.\n3.需要生成一个 disqus 的短地址,这里生成的就是你的 disqus shortname ,加入到你站点中 _config.yml\n的 shortname 就可以自动生成 disqus 评论了.\n4.如果你忘记了 shortname 可以在 site的 setting 中的 Basic 标签页中查看.\n\n#关于 git 部署\n\n其实可以不用官方插件,最后静态文件都生成在 public 目录里.\n把 public 目录的内容都push到你的 github-page 资源库的根目录就可以了.\n手写个脚本也可以一键部署\n\n#关于自定义主题\n\n_partial中的代码只是为了结构化,主界面主要是 layout 下面的7个页面,其中部分可以缺省.\n每个页面文件对应一个链接.\n\n最基础的是 index(主页) 和 post(文章)\n\njs 和 css 则加在 layout 同级的 source 目录就可以.\n\n目录的索引以 source 为模板的当前目录,相对路径直接从这里写起就可以\n\n另外还是 swig 的模板阅读方便点, ejs 实在看得有点累\n\n- - -\n\n**参考** \n\n[更换博客系统——从jekyll到hexo](http://zhaofei.tk/2014/11/30/jekyll_to_hexo/)\n[hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n[Hexo 3.0 靜態博客使用指南](http://ippotsuko.com/build-your-hexo-blog-3/)\n","slug":"doc1","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skfem0009va0d3qjs5j7f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>忙活了半天，终于搞定了。</p>\n<p><a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">hexo</a> 真的是一个非常好用的静态博客系统。</p>\n<p>评论到部署都非常方便，不需要多少编程基础就可以搞定。</p>\n<a id=\"more\"></a>\n<p>#关于 DISQUE 配置</p>\n<p>1.注册 diqus 账号,然后点击右上角进入 admin 页面 [<a href=\"https://disqus.com/admin/\" target=\"_blank\" rel=\"external\">https://disqus.com/admin/</a>]<br>2.在左边 Your Site 添加一个站点.<br>3.需要生成一个 disqus 的短地址,这里生成的就是你的 disqus shortname ,加入到你站点中 _config.yml<br>的 shortname 就可以自动生成 disqus 评论了.<br>4.如果你忘记了 shortname 可以在 site的 setting 中的 Basic 标签页中查看.</p>\n<p>#关于 git 部署</p>\n<p>其实可以不用官方插件,最后静态文件都生成在 public 目录里.<br>把 public 目录的内容都push到你的 github-page 资源库的根目录就可以了.<br>手写个脚本也可以一键部署</p>\n<p>#关于自定义主题</p>\n<p>_partial中的代码只是为了结构化,主界面主要是 layout 下面的7个页面,其中部分可以缺省.<br>每个页面文件对应一个链接.</p>\n<p>最基础的是 index(主页) 和 post(文章)</p>\n<p>js 和 css 则加在 layout 同级的 source 目录就可以.</p>\n<p>目录的索引以 source 为模板的当前目录,相对路径直接从这里写起就可以</p>\n<p>另外还是 swig 的模板阅读方便点, ejs 实在看得有点累</p>\n<hr>\n<p><strong>参考</strong> </p>\n<p><a href=\"http://zhaofei.tk/2014/11/30/jekyll_to_hexo/\" target=\"_blank\" rel=\"external\">更换博客系统——从jekyll到hexo</a><br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">hexo你的博客</a><br><a href=\"http://ippotsuko.com/build-your-hexo-blog-3/\" target=\"_blank\" rel=\"external\">Hexo 3.0 靜態博客使用指南</a></p>\n","site":{"data":{}},"excerpt":"<p>忙活了半天，终于搞定了。</p>\n<p><a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">hexo</a> 真的是一个非常好用的静态博客系统。</p>\n<p>评论到部署都非常方便，不需要多少编程基础就可以搞定。</p>","more":"<p>#关于 DISQUE 配置</p>\n<p>1.注册 diqus 账号,然后点击右上角进入 admin 页面 [<a href=\"https://disqus.com/admin/\" target=\"_blank\" rel=\"external\">https://disqus.com/admin/</a>]<br>2.在左边 Your Site 添加一个站点.<br>3.需要生成一个 disqus 的短地址,这里生成的就是你的 disqus shortname ,加入到你站点中 _config.yml<br>的 shortname 就可以自动生成 disqus 评论了.<br>4.如果你忘记了 shortname 可以在 site的 setting 中的 Basic 标签页中查看.</p>\n<p>#关于 git 部署</p>\n<p>其实可以不用官方插件,最后静态文件都生成在 public 目录里.<br>把 public 目录的内容都push到你的 github-page 资源库的根目录就可以了.<br>手写个脚本也可以一键部署</p>\n<p>#关于自定义主题</p>\n<p>_partial中的代码只是为了结构化,主界面主要是 layout 下面的7个页面,其中部分可以缺省.<br>每个页面文件对应一个链接.</p>\n<p>最基础的是 index(主页) 和 post(文章)</p>\n<p>js 和 css 则加在 layout 同级的 source 目录就可以.</p>\n<p>目录的索引以 source 为模板的当前目录,相对路径直接从这里写起就可以</p>\n<p>另外还是 swig 的模板阅读方便点, ejs 实在看得有点累</p>\n<hr>\n<p><strong>参考</strong> </p>\n<p><a href=\"http://zhaofei.tk/2014/11/30/jekyll_to_hexo/\" target=\"_blank\" rel=\"external\">更换博客系统——从jekyll到hexo</a><br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">hexo你的博客</a><br><a href=\"http://ippotsuko.com/build-your-hexo-blog-3/\" target=\"_blank\" rel=\"external\">Hexo 3.0 靜態博客使用指南</a></p>"},{"title":"Mac下使用sudo提示permission denied","date":"2017-04-21T02:06:21.000Z","_content":"\n最近入手了一台新的macbook，升级了系统之后居然发现了一个诡异问题。\n\n系统默认安装的six（python库）居然不能够升级，使用sudo（ All:（All，ALl））提示我权限不足。在类Unix系统里root权限居然会提示权限不足，真的不是在逗我玩嘛。\n\n当然我可以选择使用virtuallenv来安装python的多环境配置，可是自己的计算机居然不在自己的掌控之下，感觉实在是不爽.\n\n既然是拿来作开发机，总要研究清楚，不断的google中终于找到了解决方案。\n\n结果发现苹果坑爹的在新系统中加入了一个rootless的机制。\n\n<!--more-->\n\n基本就是为了防止程序获取root权限对几个系统关键目录做出修改，被保护的目录主要是以下几个目录：\n\n* /System\n* /usr\n* /bin\n* /sbin\n预安装的app（比如Appstore，iTunes等等）\n\n如果你想要自己修改下面这些目录的内容，就需要关闭内核里面的rootless，也就是System Integrity Protection的服务。\n\n方法如下：\n\n1. 重启电脑，并且按下command+R，直到苹果logo出现。这个时候就会进入到Recoverty Mode。\n2. 选择一个语言。\n3. 进入恢复模式后，在上面的菜单找到实用程序（Utilities），在里面找到终端（Terminal）\n4. 打开终端输入以下指令,关闭SIP\n```\ncsrutil disable\n```\n5. 重启你的电脑，收工。\n\n参考资料：\n\n[https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11](https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11)\n\n[https://support.apple.com/en-us/HT204899](https://support.apple.com/en-us/HT204899)\n\n","source":"_posts/rootless.md","raw":"title: Mac下使用sudo提示permission denied\ndate: 2017-04-21 10:06:21\ntags:\n- mac\n- rootless\n\n---\n\n最近入手了一台新的macbook，升级了系统之后居然发现了一个诡异问题。\n\n系统默认安装的six（python库）居然不能够升级，使用sudo（ All:（All，ALl））提示我权限不足。在类Unix系统里root权限居然会提示权限不足，真的不是在逗我玩嘛。\n\n当然我可以选择使用virtuallenv来安装python的多环境配置，可是自己的计算机居然不在自己的掌控之下，感觉实在是不爽.\n\n既然是拿来作开发机，总要研究清楚，不断的google中终于找到了解决方案。\n\n结果发现苹果坑爹的在新系统中加入了一个rootless的机制。\n\n<!--more-->\n\n基本就是为了防止程序获取root权限对几个系统关键目录做出修改，被保护的目录主要是以下几个目录：\n\n* /System\n* /usr\n* /bin\n* /sbin\n预安装的app（比如Appstore，iTunes等等）\n\n如果你想要自己修改下面这些目录的内容，就需要关闭内核里面的rootless，也就是System Integrity Protection的服务。\n\n方法如下：\n\n1. 重启电脑，并且按下command+R，直到苹果logo出现。这个时候就会进入到Recoverty Mode。\n2. 选择一个语言。\n3. 进入恢复模式后，在上面的菜单找到实用程序（Utilities），在里面找到终端（Terminal）\n4. 打开终端输入以下指令,关闭SIP\n```\ncsrutil disable\n```\n5. 重启你的电脑，收工。\n\n参考资料：\n\n[https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11](https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11)\n\n[https://support.apple.com/en-us/HT204899](https://support.apple.com/en-us/HT204899)\n\n","slug":"rootless","published":1,"updated":"2017-05-01T07:20:06.000Z","_id":"cj25skfff000yva0d9voigv61","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近入手了一台新的macbook，升级了系统之后居然发现了一个诡异问题。</p>\n<p>系统默认安装的six（python库）居然不能够升级，使用sudo（ All:（All，ALl））提示我权限不足。在类Unix系统里root权限居然会提示权限不足，真的不是在逗我玩嘛。</p>\n<p>当然我可以选择使用virtuallenv来安装python的多环境配置，可是自己的计算机居然不在自己的掌控之下，感觉实在是不爽.</p>\n<p>既然是拿来作开发机，总要研究清楚，不断的google中终于找到了解决方案。</p>\n<p>结果发现苹果坑爹的在新系统中加入了一个rootless的机制。</p>\n<a id=\"more\"></a>\n<p>基本就是为了防止程序获取root权限对几个系统关键目录做出修改，被保护的目录主要是以下几个目录：</p>\n<ul>\n<li>/System</li>\n<li>/usr</li>\n<li>/bin</li>\n<li>/sbin<br>预安装的app（比如Appstore，iTunes等等）</li>\n</ul>\n<p>如果你想要自己修改下面这些目录的内容，就需要关闭内核里面的rootless，也就是System Integrity Protection的服务。</p>\n<p>方法如下：</p>\n<ol>\n<li>重启电脑，并且按下command+R，直到苹果logo出现。这个时候就会进入到Recoverty Mode。</li>\n<li>选择一个语言。</li>\n<li>进入恢复模式后，在上面的菜单找到实用程序（Utilities），在里面找到终端（Terminal）</li>\n<li><p>打开终端输入以下指令,关闭SIP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil disable</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启你的电脑，收工。</p>\n</li>\n</ol>\n<p>参考资料：</p>\n<p><a href=\"https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11\" target=\"_blank\" rel=\"external\">https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11</a></p>\n<p><a href=\"https://support.apple.com/en-us/HT204899\" target=\"_blank\" rel=\"external\">https://support.apple.com/en-us/HT204899</a></p>\n","site":{"data":{}},"excerpt":"<p>最近入手了一台新的macbook，升级了系统之后居然发现了一个诡异问题。</p>\n<p>系统默认安装的six（python库）居然不能够升级，使用sudo（ All:（All，ALl））提示我权限不足。在类Unix系统里root权限居然会提示权限不足，真的不是在逗我玩嘛。</p>\n<p>当然我可以选择使用virtuallenv来安装python的多环境配置，可是自己的计算机居然不在自己的掌控之下，感觉实在是不爽.</p>\n<p>既然是拿来作开发机，总要研究清楚，不断的google中终于找到了解决方案。</p>\n<p>结果发现苹果坑爹的在新系统中加入了一个rootless的机制。</p>","more":"<p>基本就是为了防止程序获取root权限对几个系统关键目录做出修改，被保护的目录主要是以下几个目录：</p>\n<ul>\n<li>/System</li>\n<li>/usr</li>\n<li>/bin</li>\n<li>/sbin<br>预安装的app（比如Appstore，iTunes等等）</li>\n</ul>\n<p>如果你想要自己修改下面这些目录的内容，就需要关闭内核里面的rootless，也就是System Integrity Protection的服务。</p>\n<p>方法如下：</p>\n<ol>\n<li>重启电脑，并且按下command+R，直到苹果logo出现。这个时候就会进入到Recoverty Mode。</li>\n<li>选择一个语言。</li>\n<li>进入恢复模式后，在上面的菜单找到实用程序（Utilities），在里面找到终端（Terminal）</li>\n<li><p>打开终端输入以下指令,关闭SIP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">csrutil disable</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启你的电脑，收工。</p>\n</li>\n</ol>\n<p>参考资料：</p>\n<p><a href=\"https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11\" target=\"_blank\" rel=\"external\">https://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11</a></p>\n<p><a href=\"https://support.apple.com/en-us/HT204899\" target=\"_blank\" rel=\"external\">https://support.apple.com/en-us/HT204899</a></p>"},{"title":"webpack2学习笔记","date":"2017-04-10T16:57:32.000Z","_content":"\n之前一直在用 gulp 来进行前端持续集成和打包.\n\n对于分散在各地的 html 模板没有什么好方法合并.\n\n最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.\n\n<!--more-->\n\n之前也关注过 webpack 一段时间,没想到到自己实际使用的时候,已经是 webpack2.x 了.\n\ngoogle 搜索到的文档很多都是 webpack1.x 的,本来只是想写 webpack2的语法,结果还要去看 1.x 到2.x 的 migrate.\n\n[https://webpack.js.org/guides/migrating/](https://webpack.js.org/guides/migrating/)\n\n\n## entry\n\n作为入口定义的配置，webpack支持多个入口，可以根据需要打成几个不同的bundle，来按需加载。\n\n比起整个站点都打成一个文件更加灵活。\n\ntodo\n\nchunkfile的意义\n\n\n## output\n\ntodo\n\nfilename 设置成了chunkhash之后如何映射到htmlfile里，--》 使用插件\n\nlibiry\n\nlibiryTarget\n\n## resolve 配置\n\n\n### module\n\n查找模块的文件夹从modulesDirectories变成了module, 类似于 python 的 sys.path, require 模块的查找路径.\n\n### alias\n\n起个别名,来方便简写, 节省力气打字.\n\n### extensions\n\n数组,表示省略的后缀名,默认只能省略 .js,.json\n\n\n## loaders(rule) 配置\n\nwebpack 里面改成了 rule, 但是仍然兼容 loaders 的写法.\n\n毕竟这些插件都还是叫 loader, 每添加一种新的 loader, 都要记得去 npm install 对应的 loader.\n\nrules 语法比起 loaders 语法, 也就是把级联和参数整理的更清晰了一点.\n\n```diff\n module: {\n-   loaders: [\n+   rules: [\n      {\n        test: /\\.css$/,\n-       loaders: [\n-         \"style-loader\",\n-         \"css-loader?modules=true\"\n+       use: [\n+         {\n+           loader: \"style-loader\"\n+         },\n+         {\n+           loader: \"css-loader\",\n+           options: {\n+             modules: true\n+           }\n+         }\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: \"babel-loader\", // Do not use \"use\" here\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n```\n\npre-loader 和 post-loader 去掉了,变成了 rule的一个属性\n\n常用的 loaders 有:\n\n* style-loader, css-loader, less-loader, sass-loader\n\n* url-loader\n\n* html-loader\n\n* bable-loader\n\n等等\n\n## externals\n\n第三方依赖，希望不使用webpack来bundle的文件\n\n可以使用resolve里的别名\n\ntodo\nexternals: [\"react\", /^@angular\\//],\nexternals: \"react\", //\n\n```\nexternals : {\n  react: 'react'\n}\n\n// or\n\nexternals : {\n  lodash : {\n    commonjs: \"lodash\",\n    amd: \"lodash\",\n    root: \"_\" // indicates global variable\n  }\n}\n```\n\n\n##其他配置\n\n###target\n\n主要表示打出的文件的环境，默认就是web。除此之外还有node和electron-main等等。\n\n有时候选择web会提示找不到fs和net模块的错误：\n\n```\nCannot resolve module 'fs'\nCannot resolve module 'net'\n\n``` \n\n这个时候在webpack的根配置项中加入如下的配置，就可以避免这个问题\n\n```\ntarget: \"web\",\nnode:{\n    fs:'empty',\n    net:'empty',\n},\n```\n\n虽然把target改成node也可以解决这个问题，但是打出的bundle就不能够在web中使用了\n\n具体参考：\n\n###devServer\n\n代理的设置和browsersync的配置基本是一样的，都是使用[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)进行配置，如果之前gulp也是使用browsersync来配置后端的反向代理，那么基本复制对应的配置段到proxy里就可以了。\n\n静态文件的url path缺省则是由output中的publicPath设定来识别，也可以在devServer设置一个publicPath来改写这个配置\nwebpack打出的文件默认会在这个url path下面来serve，不用额外自己创建目录结构。\n\n### 导入env变量\n\n传入环境变量，来控制是否是生产环境还是开发环境\n\n```\n-module.exports = {\n+module.exports = function(env) {\n+  return {\n    plugins: [\n      new webpack.optimize.UglifyJsPlugin({\n+        compress: env.production // compress only in production build\n      })\n    ]\n+  };\n};\n```\n\n---\n\n最后贴一下自己用的代码\n\n<script async src=\"//jsfiddle.net/nekorice/sd0535ux/embed/js/\"></script>\n\n","source":"_posts/webpack.md","raw":"title: webpack2学习笔记\ndate: 2017-04-11 00:57:32\ntags:\n- webpack\n- 前端工程化\n---\n\n之前一直在用 gulp 来进行前端持续集成和打包.\n\n对于分散在各地的 html 模板没有什么好方法合并.\n\n最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.\n\n<!--more-->\n\n之前也关注过 webpack 一段时间,没想到到自己实际使用的时候,已经是 webpack2.x 了.\n\ngoogle 搜索到的文档很多都是 webpack1.x 的,本来只是想写 webpack2的语法,结果还要去看 1.x 到2.x 的 migrate.\n\n[https://webpack.js.org/guides/migrating/](https://webpack.js.org/guides/migrating/)\n\n\n## entry\n\n作为入口定义的配置，webpack支持多个入口，可以根据需要打成几个不同的bundle，来按需加载。\n\n比起整个站点都打成一个文件更加灵活。\n\ntodo\n\nchunkfile的意义\n\n\n## output\n\ntodo\n\nfilename 设置成了chunkhash之后如何映射到htmlfile里，--》 使用插件\n\nlibiry\n\nlibiryTarget\n\n## resolve 配置\n\n\n### module\n\n查找模块的文件夹从modulesDirectories变成了module, 类似于 python 的 sys.path, require 模块的查找路径.\n\n### alias\n\n起个别名,来方便简写, 节省力气打字.\n\n### extensions\n\n数组,表示省略的后缀名,默认只能省略 .js,.json\n\n\n## loaders(rule) 配置\n\nwebpack 里面改成了 rule, 但是仍然兼容 loaders 的写法.\n\n毕竟这些插件都还是叫 loader, 每添加一种新的 loader, 都要记得去 npm install 对应的 loader.\n\nrules 语法比起 loaders 语法, 也就是把级联和参数整理的更清晰了一点.\n\n```diff\n module: {\n-   loaders: [\n+   rules: [\n      {\n        test: /\\.css$/,\n-       loaders: [\n-         \"style-loader\",\n-         \"css-loader?modules=true\"\n+       use: [\n+         {\n+           loader: \"style-loader\"\n+         },\n+         {\n+           loader: \"css-loader\",\n+           options: {\n+             modules: true\n+           }\n+         }\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: \"babel-loader\", // Do not use \"use\" here\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n```\n\npre-loader 和 post-loader 去掉了,变成了 rule的一个属性\n\n常用的 loaders 有:\n\n* style-loader, css-loader, less-loader, sass-loader\n\n* url-loader\n\n* html-loader\n\n* bable-loader\n\n等等\n\n## externals\n\n第三方依赖，希望不使用webpack来bundle的文件\n\n可以使用resolve里的别名\n\ntodo\nexternals: [\"react\", /^@angular\\//],\nexternals: \"react\", //\n\n```\nexternals : {\n  react: 'react'\n}\n\n// or\n\nexternals : {\n  lodash : {\n    commonjs: \"lodash\",\n    amd: \"lodash\",\n    root: \"_\" // indicates global variable\n  }\n}\n```\n\n\n##其他配置\n\n###target\n\n主要表示打出的文件的环境，默认就是web。除此之外还有node和electron-main等等。\n\n有时候选择web会提示找不到fs和net模块的错误：\n\n```\nCannot resolve module 'fs'\nCannot resolve module 'net'\n\n``` \n\n这个时候在webpack的根配置项中加入如下的配置，就可以避免这个问题\n\n```\ntarget: \"web\",\nnode:{\n    fs:'empty',\n    net:'empty',\n},\n```\n\n虽然把target改成node也可以解决这个问题，但是打出的bundle就不能够在web中使用了\n\n具体参考：\n\n###devServer\n\n代理的设置和browsersync的配置基本是一样的，都是使用[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)进行配置，如果之前gulp也是使用browsersync来配置后端的反向代理，那么基本复制对应的配置段到proxy里就可以了。\n\n静态文件的url path缺省则是由output中的publicPath设定来识别，也可以在devServer设置一个publicPath来改写这个配置\nwebpack打出的文件默认会在这个url path下面来serve，不用额外自己创建目录结构。\n\n### 导入env变量\n\n传入环境变量，来控制是否是生产环境还是开发环境\n\n```\n-module.exports = {\n+module.exports = function(env) {\n+  return {\n    plugins: [\n      new webpack.optimize.UglifyJsPlugin({\n+        compress: env.production // compress only in production build\n      })\n    ]\n+  };\n};\n```\n\n---\n\n最后贴一下自己用的代码\n\n<script async src=\"//jsfiddle.net/nekorice/sd0535ux/embed/js/\"></script>\n\n","slug":"webpack","published":1,"updated":"2017-05-01T07:16:35.000Z","_id":"cj25skffh000zva0d1xypexty","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前一直在用 gulp 来进行前端持续集成和打包.</p>\n<p>对于分散在各地的 html 模板没有什么好方法合并.</p>\n<p>最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.</p>\n<a id=\"more\"></a>\n<p>之前也关注过 webpack 一段时间,没想到到自己实际使用的时候,已经是 webpack2.x 了.</p>\n<p>google 搜索到的文档很多都是 webpack1.x 的,本来只是想写 webpack2的语法,结果还要去看 1.x 到2.x 的 migrate.</p>\n<p><a href=\"https://webpack.js.org/guides/migrating/\" target=\"_blank\" rel=\"external\">https://webpack.js.org/guides/migrating/</a></p>\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2><p>作为入口定义的配置，webpack支持多个入口，可以根据需要打成几个不同的bundle，来按需加载。</p>\n<p>比起整个站点都打成一个文件更加灵活。</p>\n<p>todo</p>\n<p>chunkfile的意义</p>\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p>todo</p>\n<p>filename 设置成了chunkhash之后如何映射到htmlfile里，–》 使用插件</p>\n<p>libiry</p>\n<p>libiryTarget</p>\n<h2 id=\"resolve-配置\"><a href=\"#resolve-配置\" class=\"headerlink\" title=\"resolve 配置\"></a>resolve 配置</h2><h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>查找模块的文件夹从modulesDirectories变成了module, 类似于 python 的 sys.path, require 模块的查找路径.</p>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>起个别名,来方便简写, 节省力气打字.</p>\n<h3 id=\"extensions\"><a href=\"#extensions\" class=\"headerlink\" title=\"extensions\"></a>extensions</h3><p>数组,表示省略的后缀名,默认只能省略 .js,.json</p>\n<h2 id=\"loaders-rule-配置\"><a href=\"#loaders-rule-配置\" class=\"headerlink\" title=\"loaders(rule) 配置\"></a>loaders(rule) 配置</h2><p>webpack 里面改成了 rule, 但是仍然兼容 loaders 的写法.</p>\n<p>毕竟这些插件都还是叫 loader, 每添加一种新的 loader, 都要记得去 npm install 对应的 loader.</p>\n<p>rules 语法比起 loaders 语法, 也就是把级联和参数整理的更清晰了一点.</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> module: &#123;</div><div class=\"line\"><span class=\"deletion\">-   loaders: [</span></div><div class=\"line\"><span class=\"addition\">+   rules: [</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\"><span class=\"deletion\">-       loaders: [</span></div><div class=\"line\"><span class=\"deletion\">-         \"style-loader\",</span></div><div class=\"line\"><span class=\"deletion\">-         \"css-loader?modules=true\"</span></div><div class=\"line\"><span class=\"addition\">+       use: [</span></div><div class=\"line\"><span class=\"addition\">+         &#123;</span></div><div class=\"line\"><span class=\"addition\">+           loader: \"style-loader\"</span></div><div class=\"line\"><span class=\"addition\">+         &#125;,</span></div><div class=\"line\"><span class=\"addition\">+         &#123;</span></div><div class=\"line\"><span class=\"addition\">+           loader: \"css-loader\",</span></div><div class=\"line\"><span class=\"addition\">+           options: &#123;</span></div><div class=\"line\"><span class=\"addition\">+             modules: true</span></div><div class=\"line\"><span class=\"addition\">+           &#125;</span></div><div class=\"line\"><span class=\"addition\">+         &#125;</span></div><div class=\"line\">        ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.jsx$/,</div><div class=\"line\">        loader: \"babel-loader\", // Do not use \"use\" here</div><div class=\"line\">        options: &#123;</div><div class=\"line\">          // ...</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>pre-loader 和 post-loader 去掉了,变成了 rule的一个属性</p>\n<p>常用的 loaders 有:</p>\n<ul>\n<li><p>style-loader, css-loader, less-loader, sass-loader</p>\n</li>\n<li><p>url-loader</p>\n</li>\n<li><p>html-loader</p>\n</li>\n<li><p>bable-loader</p>\n</li>\n</ul>\n<p>等等</p>\n<h2 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h2><p>第三方依赖，希望不使用webpack来bundle的文件</p>\n<p>可以使用resolve里的别名</p>\n<p>todo<br>externals: [“react”, /^@angular\\//],<br>externals: “react”, //</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">externals : &#123;</div><div class=\"line\">  react: &apos;react&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or</div><div class=\"line\"></div><div class=\"line\">externals : &#123;</div><div class=\"line\">  lodash : &#123;</div><div class=\"line\">    commonjs: &quot;lodash&quot;,</div><div class=\"line\">    amd: &quot;lodash&quot;,</div><div class=\"line\">    root: &quot;_&quot; // indicates global variable</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##其他配置</p>\n<p>###target</p>\n<p>主要表示打出的文件的环境，默认就是web。除此之外还有node和electron-main等等。</p>\n<p>有时候选择web会提示找不到fs和net模块的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cannot resolve module &apos;fs&apos;</div><div class=\"line\">Cannot resolve module &apos;net&apos;</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">这个时候在webpack的根配置项中加入如下的配置，就可以避免这个问题</div></pre></td></tr></table></figure>\n<p>target: “web”,<br>node:{<br>    fs:’empty’,<br>    net:’empty’,<br>},<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">虽然把target改成node也可以解决这个问题，但是打出的bundle就不能够在web中使用了</div><div class=\"line\"></div><div class=\"line\">具体参考：</div><div class=\"line\"></div><div class=\"line\">###devServer</div><div class=\"line\"></div><div class=\"line\">代理的设置和browsersync的配置基本是一样的，都是使用[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)进行配置，如果之前gulp也是使用browsersync来配置后端的反向代理，那么基本复制对应的配置段到proxy里就可以了。</div><div class=\"line\"></div><div class=\"line\">静态文件的url path缺省则是由output中的publicPath设定来识别，也可以在devServer设置一个publicPath来改写这个配置</div><div class=\"line\">webpack打出的文件默认会在这个url path下面来serve，不用额外自己创建目录结构。</div><div class=\"line\"></div><div class=\"line\">### 导入env变量</div><div class=\"line\"></div><div class=\"line\">传入环境变量，来控制是否是生产环境还是开发环境</div></pre></td></tr></table></figure></p>\n<p>-module.exports = {<br>+module.exports = function(env) {</p>\n<ul>\n<li>return {<br> plugins: [<br>   new webpack.optimize.UglifyJsPlugin({</li>\n<li>compress: env.production // compress only in production build<br>})<br>]</li>\n<li>};<br>};<br>```</li>\n</ul>\n<hr>\n<p>最后贴一下自己用的代码</p>\n<script async src=\"//jsfiddle.net/nekorice/sd0535ux/embed/js/\"></script>\n\n","site":{"data":{}},"excerpt":"<p>之前一直在用 gulp 来进行前端持续集成和打包.</p>\n<p>对于分散在各地的 html 模板没有什么好方法合并.</p>\n<p>最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.</p>","more":"<p>之前也关注过 webpack 一段时间,没想到到自己实际使用的时候,已经是 webpack2.x 了.</p>\n<p>google 搜索到的文档很多都是 webpack1.x 的,本来只是想写 webpack2的语法,结果还要去看 1.x 到2.x 的 migrate.</p>\n<p><a href=\"https://webpack.js.org/guides/migrating/\" target=\"_blank\" rel=\"external\">https://webpack.js.org/guides/migrating/</a></p>\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2><p>作为入口定义的配置，webpack支持多个入口，可以根据需要打成几个不同的bundle，来按需加载。</p>\n<p>比起整个站点都打成一个文件更加灵活。</p>\n<p>todo</p>\n<p>chunkfile的意义</p>\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p>todo</p>\n<p>filename 设置成了chunkhash之后如何映射到htmlfile里，–》 使用插件</p>\n<p>libiry</p>\n<p>libiryTarget</p>\n<h2 id=\"resolve-配置\"><a href=\"#resolve-配置\" class=\"headerlink\" title=\"resolve 配置\"></a>resolve 配置</h2><h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>查找模块的文件夹从modulesDirectories变成了module, 类似于 python 的 sys.path, require 模块的查找路径.</p>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>起个别名,来方便简写, 节省力气打字.</p>\n<h3 id=\"extensions\"><a href=\"#extensions\" class=\"headerlink\" title=\"extensions\"></a>extensions</h3><p>数组,表示省略的后缀名,默认只能省略 .js,.json</p>\n<h2 id=\"loaders-rule-配置\"><a href=\"#loaders-rule-配置\" class=\"headerlink\" title=\"loaders(rule) 配置\"></a>loaders(rule) 配置</h2><p>webpack 里面改成了 rule, 但是仍然兼容 loaders 的写法.</p>\n<p>毕竟这些插件都还是叫 loader, 每添加一种新的 loader, 都要记得去 npm install 对应的 loader.</p>\n<p>rules 语法比起 loaders 语法, 也就是把级联和参数整理的更清晰了一点.</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> module: &#123;</div><div class=\"line\"><span class=\"deletion\">-   loaders: [</span></div><div class=\"line\"><span class=\"addition\">+   rules: [</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\"><span class=\"deletion\">-       loaders: [</span></div><div class=\"line\"><span class=\"deletion\">-         \"style-loader\",</span></div><div class=\"line\"><span class=\"deletion\">-         \"css-loader?modules=true\"</span></div><div class=\"line\"><span class=\"addition\">+       use: [</span></div><div class=\"line\"><span class=\"addition\">+         &#123;</span></div><div class=\"line\"><span class=\"addition\">+           loader: \"style-loader\"</span></div><div class=\"line\"><span class=\"addition\">+         &#125;,</span></div><div class=\"line\"><span class=\"addition\">+         &#123;</span></div><div class=\"line\"><span class=\"addition\">+           loader: \"css-loader\",</span></div><div class=\"line\"><span class=\"addition\">+           options: &#123;</span></div><div class=\"line\"><span class=\"addition\">+             modules: true</span></div><div class=\"line\"><span class=\"addition\">+           &#125;</span></div><div class=\"line\"><span class=\"addition\">+         &#125;</span></div><div class=\"line\">        ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.jsx$/,</div><div class=\"line\">        loader: \"babel-loader\", // Do not use \"use\" here</div><div class=\"line\">        options: &#123;</div><div class=\"line\">          // ...</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>pre-loader 和 post-loader 去掉了,变成了 rule的一个属性</p>\n<p>常用的 loaders 有:</p>\n<ul>\n<li><p>style-loader, css-loader, less-loader, sass-loader</p>\n</li>\n<li><p>url-loader</p>\n</li>\n<li><p>html-loader</p>\n</li>\n<li><p>bable-loader</p>\n</li>\n</ul>\n<p>等等</p>\n<h2 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h2><p>第三方依赖，希望不使用webpack来bundle的文件</p>\n<p>可以使用resolve里的别名</p>\n<p>todo<br>externals: [“react”, /^@angular\\//],<br>externals: “react”, //</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">externals : &#123;</div><div class=\"line\">  react: &apos;react&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// or</div><div class=\"line\"></div><div class=\"line\">externals : &#123;</div><div class=\"line\">  lodash : &#123;</div><div class=\"line\">    commonjs: &quot;lodash&quot;,</div><div class=\"line\">    amd: &quot;lodash&quot;,</div><div class=\"line\">    root: &quot;_&quot; // indicates global variable</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##其他配置</p>\n<p>###target</p>\n<p>主要表示打出的文件的环境，默认就是web。除此之外还有node和electron-main等等。</p>\n<p>有时候选择web会提示找不到fs和net模块的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cannot resolve module &apos;fs&apos;</div><div class=\"line\">Cannot resolve module &apos;net&apos;</div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">这个时候在webpack的根配置项中加入如下的配置，就可以避免这个问题</div></pre></td></tr></table></figure>\n<p>target: “web”,<br>node:{<br>    fs:’empty’,<br>    net:’empty’,<br>},<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">虽然把target改成node也可以解决这个问题，但是打出的bundle就不能够在web中使用了</div><div class=\"line\"></div><div class=\"line\">具体参考：</div><div class=\"line\"></div><div class=\"line\">###devServer</div><div class=\"line\"></div><div class=\"line\">代理的设置和browsersync的配置基本是一样的，都是使用[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware)进行配置，如果之前gulp也是使用browsersync来配置后端的反向代理，那么基本复制对应的配置段到proxy里就可以了。</div><div class=\"line\"></div><div class=\"line\">静态文件的url path缺省则是由output中的publicPath设定来识别，也可以在devServer设置一个publicPath来改写这个配置</div><div class=\"line\">webpack打出的文件默认会在这个url path下面来serve，不用额外自己创建目录结构。</div><div class=\"line\"></div><div class=\"line\">### 导入env变量</div><div class=\"line\"></div><div class=\"line\">传入环境变量，来控制是否是生产环境还是开发环境</div></pre></td></tr></table></figure></p>\n<p>-module.exports = {<br>+module.exports = function(env) {</p>\n<ul>\n<li>return {<br> plugins: [<br>   new webpack.optimize.UglifyJsPlugin({</li>\n<li>compress: env.production // compress only in production build<br>})<br>]</li>\n<li>};<br>};<br>```</li>\n</ul>\n<hr>\n<p>最后贴一下自己用的代码</p>\n<script async src=\"//jsfiddle.net/nekorice/sd0535ux/embed/js/\"></script>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj25skfej0008va0dte8fzr5r","tag_id":"cj25skfe90003va0dhi3v07os","_id":"cj25skfet000bva0dcf7rmwsg"},{"post_id":"cj25skfej0008va0dte8fzr5r","tag_id":"cj25skfeh0007va0d8c0ewg2a","_id":"cj25skfey000cva0diwxajyrl"},{"post_id":"cj25skfe30001va0dyitvggsj","tag_id":"cj25skfe90003va0dhi3v07os","_id":"cj25skff1000eva0db7gw7drj"},{"post_id":"cj25skfe30001va0dyitvggsj","tag_id":"cj25skfeh0007va0d8c0ewg2a","_id":"cj25skff1000fva0di617gp6l"},{"post_id":"cj25skfe30001va0dyitvggsj","tag_id":"cj25skfer000ava0dvl2zljjr","_id":"cj25skff2000hva0dfa1oyfu7"},{"post_id":"cj25skfe50002va0djmkw2ozi","tag_id":"cj25skfe90003va0dhi3v07os","_id":"cj25skff5000kva0d1zwnbyno"},{"post_id":"cj25skfe50002va0djmkw2ozi","tag_id":"cj25skff1000gva0dji23hr3w","_id":"cj25skff6000lva0dkihunwb4"},{"post_id":"cj25skfe50002va0djmkw2ozi","tag_id":"cj25skff2000iva0d2t3y7k3w","_id":"cj25skff7000nva0dthkemoe2"},{"post_id":"cj25skfea0004va0dh31467ln","tag_id":"cj25skfe90003va0dhi3v07os","_id":"cj25skff8000qva0dfs8zo254"},{"post_id":"cj25skfea0004va0dh31467ln","tag_id":"cj25skff1000gva0dji23hr3w","_id":"cj25skffb000rva0dds6ootjm"},{"post_id":"cj25skfea0004va0dh31467ln","tag_id":"cj25skfeh0007va0d8c0ewg2a","_id":"cj25skffc000tva0d95joaxav"},{"post_id":"cj25skfec0005va0d66dlph46","tag_id":"cj25skfe90003va0dhi3v07os","_id":"cj25skffd000uva0dqy90vob1"},{"post_id":"cj25skfec0005va0d66dlph46","tag_id":"cj25skfeh0007va0d8c0ewg2a","_id":"cj25skffd000vva0d3wfs8qqr"},{"post_id":"cj25skfef0006va0ddtjpuk1o","tag_id":"cj25skfe90003va0dhi3v07os","_id":"cj25skffd000wva0dl7kjrzw0"},{"post_id":"cj25skfef0006va0ddtjpuk1o","tag_id":"cj25skfeh0007va0d8c0ewg2a","_id":"cj25skffd000xva0dkjkmxycw"},{"post_id":"cj25skfff000yva0d9voigv61","tag_id":"cj25skffi0010va0duqj3c4np","_id":"cj25skffj0013va0dp8t26qvm"},{"post_id":"cj25skfff000yva0d9voigv61","tag_id":"cj25skffj0011va0dq2h5d9vj","_id":"cj25skffj0014va0dmmc50nsy"},{"post_id":"cj25skffh000zva0d1xypexty","tag_id":"cj25skffj0012va0dl51fq8ac","_id":"cj25skffk0016va0dbzk9rznw"},{"post_id":"cj25skffh000zva0d1xypexty","tag_id":"cj25skffj0015va0dx0u7zry9","_id":"cj25skffk0017va0dkocd21jh"}],"Tag":[{"name":"angularjs","_id":"cj25skfe90003va0dhi3v07os"},{"name":"前端","_id":"cj25skfeh0007va0d8c0ewg2a"},{"name":"form","_id":"cj25skfer000ava0dvl2zljjr"},{"name":"directive","_id":"cj25skff1000gva0dji23hr3w"},{"name":"js","_id":"cj25skff2000iva0d2t3y7k3w"},{"name":"mac","_id":"cj25skffi0010va0duqj3c4np"},{"name":"rootless","_id":"cj25skffj0011va0dq2h5d9vj"},{"name":"webpack","_id":"cj25skffj0012va0dl51fq8ac"},{"name":"前端工程化","_id":"cj25skffj0015va0dx0u7zry9"},{"name":"配置","_id":"cj25soagd0000xl0d6lmr0srd"}]}}