{"Asset":[{"_id":"themes/apollo/source/images/icon-reorder@2x.png","path":"images/icon-reorder@2x.png","modified":false},{"_id":"themes/apollo/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/apollo/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/apollo/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.2.0.3.min.js","path":"fancybox/jquery.2.0.3.min.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1421944673000},{"_id":"scaffolds/page.md","mtime":1421944673000},{"_id":"scaffolds/photo.md","mtime":1421944673000},{"_id":"scaffolds/post.md","mtime":1421944673000},{"_id":"source/_posts/doc1.md","mtime":1454338037000},{"_id":"themes/hexo3/_config.yml","mtime":1414504506000},{"_id":"themes/hexo3/layout/archive.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/index.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/layout.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/page.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/post.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/after-footer.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/article.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/comment.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/footer.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/google-analytics.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/head.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/header.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/news-banner.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/share.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/sidebar.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/post/date.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/post/share.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/_partial/post/title.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/class.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/layout.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/module.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/_partial/classitem.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/_partial/deprecated.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/_partial/options.ejs","mtime":1414504506000},{"_id":"themes/hexo3/layout/api/_partial/sidebar.ejs","mtime":1414504506000},{"_id":"themes/hexo3/source/js/retina.min.js","mtime":1414504506000},{"_id":"themes/hexo3/source/js/script.js","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_variables.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/style.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/api.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/footer.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/header.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/highlight.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/index.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/news.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/page.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_partial/sidebar.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_util/grid.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/_util/mixin.styl","mtime":1414504506000},{"_id":"themes/hexo3/source/css/fonts/icomoon.eot","mtime":1414504506000},{"_id":"themes/hexo3/source/css/fonts/icomoon.svg","mtime":1414504506000},{"_id":"themes/hexo3/source/css/fonts/icomoon.ttf","mtime":1414504506000},{"_id":"themes/hexo3/source/css/fonts/icomoon.woff","mtime":1414504506000},{"_id":"themes/hexo3/source/css/images/logo.png","mtime":1414504506000},{"_id":"themes/hexo3/source/css/images/logo@2x.png","mtime":1414504506000},{"_id":"themes/hexo3/source/css/images/shattered.png","mtime":1414504506000},{"_id":"themes/hexo3/source/css/images/shattered@2x.png","mtime":1414504506000},{"_id":"themes/apollo/README.md","mtime":1423066625000},{"_id":"themes/apollo/_config.yml","mtime":1423145436000},{"_id":"themes/apollo/scripts/fancybox.js","mtime":1423066625000},{"_id":"themes/apollo/layout/archive.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/category.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/index.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/layout.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/page.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/post.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/tag.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/after-footer.ejs","mtime":1423076136000},{"_id":"themes/apollo/layout/_partial/archive.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/article.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/footer.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/google-analytics.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/head.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/header.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/post/category.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/post/date.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/post/gallery.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/post/nav.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/post/tag.ejs","mtime":1423066625000},{"_id":"themes/apollo/layout/_partial/post/title.ejs","mtime":1423066625000},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","mtime":1423066625000},{"_id":"themes/apollo/source/js/script.js","mtime":1423066625000},{"_id":"themes/apollo/source/css/style.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_bass/bass.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_bass/syntax.styl","mtime":1423068481000},{"_id":"themes/apollo/source/css/_bass/variables.styl","mtime":1423068976000},{"_id":"themes/apollo/source/css/_partial/archive.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_partial/article-nav.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_partial/article-gallery.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_partial/article.styl","mtime":1454339547000},{"_id":"themes/apollo/source/css/_partial/footer.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_partial/header.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/_partial/rwd.styl","mtime":1423066625000},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","mtime":1423066625000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","mtime":1423066625000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","mtime":1423066625000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","mtime":1423066625000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/blank.gif","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1423066625000},{"_id":"themes/landscape/LICENSE","mtime":1421944673000},{"_id":"themes/landscape/Gruntfile.js","mtime":1421944673000},{"_id":"themes/landscape/README.md","mtime":1421944673000},{"_id":"themes/landscape/_config.yml","mtime":1421944673000},{"_id":"themes/landscape/package.json","mtime":1421944673000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1421944673000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/category.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/index.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/page.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/post.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1421944673000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1421944673000},{"_id":"themes/landscape/source/js/script.js","mtime":1421944673000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/style.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1421944673000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1421944673000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1421944673000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1421944673000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1421944673000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1421944673000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1421944673000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1421944673000},{"_id":"themes/apollo_fake/README.md","mtime":1423066625000},{"_id":"themes/apollo_fake/_config.yml","mtime":1423066625000},{"_id":"themes/apollo_fake/source/images/icon-reorder@2x.png","mtime":1423066625000},{"_id":"themes/apollo_fake/scripts/fancybox.js","mtime":1423066625000},{"_id":"themes/apollo_fake/source/js/script.js","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/style.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/archive.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/article-gallery.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/article-nav.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/article.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/footer.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/header.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_partial/rwd.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_bass/bass.styl","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/_bass/syntax.styl","mtime":1423068481000},{"_id":"themes/apollo_fake/source/css/_bass/variables.styl","mtime":1423068976000},{"_id":"themes/apollo_fake/source/css/fonts/FontAwesome.otf","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/fonts/fontawesome-webfont.eot","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/fonts/fontawesome-webfont.svg","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/fonts/fontawesome-webfont.ttf","mtime":1423066625000},{"_id":"themes/apollo_fake/source/css/fonts/fontawesome-webfont.woff","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/fancybox_loading.gif","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/blank.gif","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/fancybox_loading@2x.gif","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/fancybox_overlay.png","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/fancybox_sprite.png","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/fancybox_sprite@2x.png","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/jquery.2.0.3.min.js","mtime":1423075931000},{"_id":"themes/apollo_fake/source/fancybox/jquery.fancybox.css","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/jquery.fancybox.js","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/jquery.fancybox.pack.js","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/helpers/fancybox_buttons.png","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1423066625000},{"_id":"themes/apollo_fake/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/archive.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/category.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/index.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/layout.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/page.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/post.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/tag.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/archive.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/after-footer.ejs","mtime":1423076136000},{"_id":"themes/apollo_fake/layout/_partial/article.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/footer.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/google-analytics.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/head.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/header.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/post/category.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/post/date.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/post/gallery.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/post/nav.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/post/tag.ejs","mtime":1423066625000},{"_id":"themes/apollo_fake/layout/_partial/post/title.ejs","mtime":1423066625000},{"_id":"themes/apollo/source/fancybox/jquery.2.0.3.min.js","mtime":1423075931000},{"_id":"source/_posts/angular-directive.md","mtime":1492103423000},{"_id":"source/_posts/angular-protractor","mtime":1491385586000},{"_id":"source/_posts/angular-main.md","mtime":1491931999000},{"_id":"source/_posts/angular-module.md","mtime":1490030477000},{"_id":"source/_posts/angular-provider.md","mtime":1492103412000},{"_id":"source/_posts/angluar-form.md","mtime":1492101634000},{"_id":"source/_posts/angular-direct.md","mtime":1492103480000},{"_id":"source/_posts/webpack.md","mtime":1492103525000}],"Category":[],"Page":[],"Post":[{"title":"第一篇博客","date":1423144503000,"tags":[],"content":"<p>忙活了半天，终于搞定了。</p>\n<p><a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">hexo</a> 真的是一个非常好用的静态博客系统。</p>\n<p>评论到部署都非常方便，不需要多少编程基础就可以搞定。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"关于_DISQUE_配置\">关于 DISQUE 配置</h1>\n<p>1.注册 diqus 账号,然后点击右上角进入 admin 页面 [<a href=\"https://disqus.com/admin/\" target=\"_blank\" rel=\"external\">https://disqus.com/admin/</a>]<br>2.在左边 Your Site 添加一个站点.<br>3.需要生成一个 disqus 的短地址,这里生成的就是你的 disqus shortname ,加入到你站点中 _config.yml<br>的 shortname 就可以自动生成 disqus 评论了.<br>4.如果你忘记了 shortname 可以在 site的 setting 中的 Basic 标签页中查看.</p>\n<h1 id=\"关于_git_部署\">关于 git 部署</h1>\n<p>其实可以不用官方插件,最后静态文件都生成在 public 目录里.<br>把 public 目录的内容都push到你的 github-page 资源库的根目录就可以了.<br>手写个脚本也可以一键部署</p>\n<h1 id=\"关于自定义主题\">关于自定义主题</h1>\n<p>_partial中的代码只是为了结构化,主界面主要是 layout 下面的7个页面,其中部分可以缺省.<br>每个页面文件对应一个链接.</p>\n<p>最基础的是 index(主页) 和 post(文章)</p>\n<p>js 和 css 则加在 layout 同级的 source 目录就可以.</p>\n<p>目录的索引以 source 为模板的当前目录,相对路径直接从这里写起就可以</p>\n<p>另外还是 swig 的模板阅读方便点, ejs 实在看得有点累</p>\n<hr>\n<p><strong>参考</strong> </p>\n<p><a href=\"http://zhaofei.tk/2014/11/30/jekyll_to_hexo/\" target=\"_blank\" rel=\"external\">更换博客系统——从jekyll到hexo</a><br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">hexo你的博客</a><br><a href=\"http://ippotsuko.com/build-your-hexo-blog-3/\" target=\"_blank\" rel=\"external\">Hexo 3.0 靜態博客使用指南</a></p>\n","source":"_posts/doc1.md","raw":"title: 第一篇博客\ndate: 2015-02-05 21:55:03\ntags:\n---\n\n\n\n忙活了半天，终于搞定了。\n\n\n[hexo](http://hexo.io/docs/) 真的是一个非常好用的静态博客系统。\n\n评论到部署都非常方便，不需要多少编程基础就可以搞定。\n\n<!--more-->\n\n#关于 DISQUE 配置\n\n1.注册 diqus 账号,然后点击右上角进入 admin 页面 [https://disqus.com/admin/]\n2.在左边 Your Site 添加一个站点.\n3.需要生成一个 disqus 的短地址,这里生成的就是你的 disqus shortname ,加入到你站点中 _config.yml\n的 shortname 就可以自动生成 disqus 评论了.\n4.如果你忘记了 shortname 可以在 site的 setting 中的 Basic 标签页中查看.\n\n#关于 git 部署\n\n其实可以不用官方插件,最后静态文件都生成在 public 目录里.\n把 public 目录的内容都push到你的 github-page 资源库的根目录就可以了.\n手写个脚本也可以一键部署\n\n#关于自定义主题\n\n_partial中的代码只是为了结构化,主界面主要是 layout 下面的7个页面,其中部分可以缺省.\n每个页面文件对应一个链接.\n\n最基础的是 index(主页) 和 post(文章)\n\njs 和 css 则加在 layout 同级的 source 目录就可以.\n\n目录的索引以 source 为模板的当前目录,相对路径直接从这里写起就可以\n\n另外还是 swig 的模板阅读方便点, ejs 实在看得有点累\n\n- - -\n\n**参考** \n\n[更换博客系统——从jekyll到hexo](http://zhaofei.tk/2014/11/30/jekyll_to_hexo/)\n[hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n[Hexo 3.0 靜態博客使用指南](http://ippotsuko.com/build-your-hexo-blog-3/)\n","slug":"doc1","updated":1454338037000,"excerpt":"<p>忙活了半天，终于搞定了。</p>\n<p><a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">hexo</a> 真的是一个非常好用的静态博客系统。</p>\n<p>评论到部署都非常方便，不需要多少编程基础就可以搞定。</p>\n","_id":"2v5t6h8ul9kms8ob","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"angularjs自定义directive","date":1453907627000,"tags":["zg2ebll2vb1jw72p","oblo0hbf2620lwuw","8p6a4n43ng1rxakg"],"content":"<p>最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.</p>\n<p>页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"directive_的定义\">directive 的定义</h1>\n<p>参考<a href=\"https://docs.angularjs.org/guide/directive\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>定义一个 directive 的基本格式很简单,第一个参数是 directive 的 name, 第二个参数是一个函数,这个函数需要返回一个 object. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    templateUrl: <span class=\"string\">'my-customer.html'</span></div><div class=\"line\">  };</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>也可以写成依赖注入的数组形式.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, [<span class=\"variable\">$timeout</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$timeout</span>)</span></span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    templateUrl: <span class=\"string\">'my-customer.html'</span></div><div class=\"line\">  }</div><div class=\"line\">}])</div></pre></td></tr></table></figure>\n\n<p>directive 的 name 应当使用驼峰命名法,在 angularjs解析 html 时,以’:’,’-‘,’_’分割单词,和 data 或者 x 前缀都会被识别为对应 name 的 directive.</p>\n<p>但是如果中间没有分割,比如写成 ngModel 则无法识别出来. 这样处理的原因,可能是因为 html 对大小写不敏感.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"Controller\"</span>&gt;</span></div><div class=\"line\">  Hello <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">'name'</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">hr</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">ng-bind</span>=<span class=\"value\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">ng:bind</span>=<span class=\"value\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">ng_bind</span>=<span class=\"value\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">data-ng-bind</span>=<span class=\"value\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">x-ng-bind</span>=<span class=\"value\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h1 id=\"directive_的参数配置\">directive 的参数配置</h1>\n<p>在第二个参数中函数返回的 object 里定义directive 的配置.</p>\n<p>常见的参数有</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">restrict: 'AEC',</div><div class=\"line\">* E - Element name (default): <span class=\"tag\">&lt;<span class=\"title\">my-directive</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">my-directive</span>&gt;</span></div><div class=\"line\">* A - Attribute (default): <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">my-directive</span>=<span class=\"value\">\"exp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">* C - Class: <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"my-directive: exp;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">* M - Comment: <span class=\"comment\">&lt;!-- directive: my-directive exp --&gt;</span></div></pre></td></tr></table></figure>\n\n<p>是否替换掉原有的 directive 标签</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">replace</span>: <span class=\"literal\">True</span>/<span class=\"literal\">False</span></span></div></pre></td></tr></table></figure>\n\n<p>是否把标签的内部元素也传入 directive 进行处理</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">transclude</span>: <span class=\"string\">True/False</span></div></pre></td></tr></table></figure>\n\n<p>模板字符串/模板 url(只能使用其中一个参数)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>:<span class=\"string\">\"\"</span></div><div class=\"line\">template_url:<span class=\"string\">\"\"</span></div></pre></td></tr></table></figure>\n\n<p>绑定行为(link/compile二选一)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: <span class=\"keyword\">Object</span> | <span class=\"function\"><span class=\"keyword\">function</span></span></div><div class=\"line\"><span class=\"title\">compile</span>: <span class=\"keyword\">Object</span> | <span class=\"function\"><span class=\"keyword\">function</span></span></div></pre></td></tr></table></figure>\n\n<p>完整的参数参考下述页面<br><a href=\"https://docs.angularjs.org/api/ng/service/$compile\" target=\"_blank\" rel=\"external\">$compile 页面</a></p>\n<h2 id=\"directive_scope\">directive scope</h2>\n<h3 id=\"继承_scope\">继承 scope</h3>\n<p>scope 可以取三种值, true, false 和一个 Object{}</p>\n<p>当为 true 时,则继承 controller 的 scope, 通过访问 parent 来访问 controller 中的 scope, 所有修改都不会影响原有的 scope.</p>\n<p>为 false 时,直接使用当前的父 controller 的 scope, 会共享之间的修改.</p>\n<h3 id=\"isolated_scope\">isolated scope</h3>\n<p>directive 虽然可以访问模块的 scope, 官方建议通过属性把值传递到directive 的isolated scope中.</p>\n<p>参考官方文档</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    restrict: <span class=\"string\">'E'</span>,</div><div class=\"line\">    scope: {</div><div class=\"line\">      customerInfo: <span class=\"string\">'=info'</span></div><div class=\"line\">    },</div><div class=\"line\">    templateUrl: <span class=\"string\">'my-customer-iso.html'</span></div><div class=\"line\">  };</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\">&lt;div ng-controller=<span class=\"string\">\"Controller\"</span>&gt;</div><div class=\"line\">  &lt;my-customer info=<span class=\"string\">\"naomi\"</span>&gt;&lt;/my-customer&gt;</div><div class=\"line\">  &lt;my-customer info=<span class=\"string\">\"igor\"</span>&gt;&lt;/my-customer&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n\n<p>显示为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Name</span>: <span class=\"string\">Naomi Address: 1600 Amphitheatre</span></div><div class=\"line\"><span class=\"attribute\">Name</span>: <span class=\"string\">Igor Address: 123 Somewhere</span></div></pre></td></tr></table></figure>\n\n<p>isolated scope 一共有以下几种传入方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'='</span>  属性的值使用 angularjs 表达式计算</div><div class=\"line\"><span class=\"string\">'@'</span>  直接使用属性的字符串</div><div class=\"line\"><span class=\"string\">'&'</span>  则是可以传递函数</div></pre></td></tr></table></figure>\n\n<h2 id=\"link_函数\">link 函数</h2>\n<p>在 directive 生成模板的时候,需要一些额外处理,可以在 link 函数中处理.</p>\n<p>需要注意的是, link 函数调用的时候(Post-linking function), </p>\n<p>这个时候如果获取 template_url 中的元素,</p>\n<p>directive 是不一定完成渲染的,</p>\n<p>如果这个时候去取子元素,很可能得到的会是空值.</p>\n<p>要保证 post-link 里面可以获得子元素,应当使用 template 来作为模板的渲染.而不是一个 url.</p>\n<h4 id=\"如何保证在_directive_渲染完成后执行函数\">如何保证在 directive 渲染完成后执行函数</h4>\n<p>实在不能避免使用 template_url 来定义模板,目前一种可行办法是使用$timeout service</p>\n<p>使用$timeout,这个 service, 当后面不带时间参数时,</p>\n<p>定义的回调函数将在 angularjs 渲染完成之后调用.</p>\n<p>相当于 jquery 的 document.ready()函数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, [<span class=\"variable\">$timeout</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$timeout</span>)</span></span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    templateUrl: <span class=\"string\">'my-customer.html'</span>,</div><div class=\"line\">    replace: <span class=\"keyword\">true</span>,</div><div class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(scope, element, attrs)</span> </span>{</div><div class=\"line\">      <span class=\"variable\">$timeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>{</div><div class=\"line\">        <span class=\"comment\">//do something when angularjs loaded</span></div><div class=\"line\">      })</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}])</div></pre></td></tr></table></figure>\n\n<h2 id=\"实时更新_directive\">实时更新 directive</h2>\n<p>默认 directive 只在生成的时候 link.</p>\n<p>需要实时更新则要使用 scope.watch,来检测 scope 的修改</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.directive(<span class=\"string\">'myCustomer'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    templateUrl: <span class=\"string\">'my-customer.html'</span>,</div><div class=\"line\">    replace: <span class=\"keyword\">true</span>,</div><div class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(scope, element, attrs)</span> </span>{</div><div class=\"line\"></div><div class=\"line\">      scope.<span class=\"variable\">$watch</span>(attrs.filter, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(newValue)</span> </span>{</div><div class=\"line\">        <span class=\"comment\">//filter属性可能是用其他的 scope 中传递过来的值        </span></div><div class=\"line\">        scope.filter = newValue</div><div class=\"line\">      })</div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">})</div></pre></td></tr></table></figure>\n\n<h2 id=\"如何动态获取_directive_的_name\">如何动态获取 directive 的 name</h2>\n<p>比如定义了几个功能相似的 directive, 又不想用属性来区分,而是想要用 directive name 来区分.</p>\n<p>我定义了一个 chart 的 directive, 但是我还想定义几个叫做 pie,bar 和 line 的 directive<br>来作为 chart type=’pie’|’bar’|’line’ 的别名,这个时候想要动态获取一下 directive 来带入到一个生成 directive 的函数中.</p>\n<p>需要动态获得 directive 的 name,link 函数无法获取 directive 的name, 这个时候就可以使用compile 函数.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(cElem, cAttrs, transclude)</span> </span>{</div><div class=\"line\">      <span class=\"comment\">//get directive name</span></div><div class=\"line\">      <span class=\"keyword\">var</span> name = <span class=\"keyword\">this</span>.name;</div><div class=\"line\">      <span class=\"comment\">//link func</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(scope, element, attrs)</span> </span>{</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"comment\">//do somethin</span></div><div class=\"line\">          myFunc(name)</div><div class=\"line\"></div><div class=\"line\">        });</div><div class=\"line\">      }</div><div class=\"line\">    }<span class=\"comment\">// end compile</span></div></pre></td></tr></table></figure>\n\n<p>compile 函数定义就是会返回一个 link 函数,而 compile 的this 指针指向的就是 directive 对象.利用闭包就可以传递 name.</p>\n<p>需要注意的是当使用 compile 参数时, link 定义将会失效.</p>\n","source":"_posts/angular-directive.md","raw":"title: angularjs自定义directive\ndate: 2016-01-27 23:13:47\ntags:\n- angularjs\n- directive\n- 前端\n---\n\n最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.\n\n页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.\n\n<!--more-->\n\n#directive 的定义\n\n参考[官方文档](https://docs.angularjs.org/guide/directive)\n\n定义一个 directive 的基本格式很简单,第一个参数是 directive 的 name, 第二个参数是一个函数,这个函数需要返回一个 object. \n\n```javascript\n.directive('myCustomer', function() {\n  return {\n    templateUrl: 'my-customer.html'\n  };\n});\n```\n\n也可以写成依赖注入的数组形式.\n\n```\n.directive('myCustomer', [$timeout, function($timeout){\n  return {\n    templateUrl: 'my-customer.html'\n  }\n}])\n\n```\n\ndirective 的 name 应当使用驼峰命名法,在 angularjs解析 html 时,以':','-','_'分割单词,和 data 或者 x 前缀都会被识别为对应 name 的 directive.\n\n但是如果中间没有分割,比如写成 ngModel 则无法识别出来. 这样处理的原因,可能是因为 html 对大小写不敏感.\n\n```\n<div ng-controller=\"Controller\">\n  Hello <input ng-model='name'> <hr/>\n  <span ng-bind=\"name\"></span> <br/>\n  <span ng:bind=\"name\"></span> <br/>\n  <span ng_bind=\"name\"></span> <br/>\n  <span data-ng-bind=\"name\"></span> <br/>\n  <span x-ng-bind=\"name\"></span> <br/>\n</div>\n```\n\n\n#directive 的参数配置\n\n在第二个参数中函数返回的 object 里定义directive 的配置.\n\n常见的参数有\n\n```\nrestrict: 'AEC',\n* E - Element name (default): <my-directive></my-directive>\n* A - Attribute (default): <div my-directive=\"exp\"></div>\n* C - Class: <div class=\"my-directive: exp;\"></div>\n* M - Comment: <!-- directive: my-directive exp -->\n```\n\n是否替换掉原有的 directive 标签\n```\nreplace: True/False\n```\n\n是否把标签的内部元素也传入 directive 进行处理\n```\ntransclude: True/False\n```\n\n模板字符串/模板 url(只能使用其中一个参数)\n```\ntemplate:\"\"\ntemplate_url:\"\"\n```\n\n绑定行为(link/compile二选一)\n\n```\nlink: Object | function\ncompile: Object | function\n```\n\n完整的参数参考下述页面\n[$compile 页面](https://docs.angularjs.org/api/ng/service/$compile)\n\n##directive scope \n\n### 继承 scope\n\nscope 可以取三种值, true, false 和一个 Object{}\n\n当为 true 时,则继承 controller 的 scope, 通过访问 parent 来访问 controller 中的 scope, 所有修改都不会影响原有的 scope.\n\n为 false 时,直接使用当前的父 controller 的 scope, 会共享之间的修改.\n\n###isolated scope\n\ndirective 虽然可以访问模块的 scope, 官方建议通过属性把值传递到directive 的isolated scope中.\n\n参考官方文档\n\n```\n\n.directive('myCustomer', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      customerInfo: '=info'\n    },\n    templateUrl: 'my-customer-iso.html'\n  };\n});\n\n<div ng-controller=\"Controller\">\n  <my-customer info=\"naomi\"></my-customer>\n  <my-customer info=\"igor\"></my-customer>\n</div>\n\n```\n显示为\n\n```\nName: Naomi Address: 1600 Amphitheatre\nName: Igor Address: 123 Somewhere\n```\n\nisolated scope 一共有以下几种传入方式\n``` \n'='  属性的值使用 angularjs 表达式计算\n'@'  直接使用属性的字符串\n'&'  则是可以传递函数\n\n```\n\n## link 函数\n\n在 directive 生成模板的时候,需要一些额外处理,可以在 link 函数中处理.\n\n需要注意的是, link 函数调用的时候(Post-linking function), \n\n这个时候如果获取 template_url 中的元素,\n\ndirective 是不一定完成渲染的,\n\n如果这个时候去取子元素,很可能得到的会是空值.\n\n要保证 post-link 里面可以获得子元素,应当使用 template 来作为模板的渲染.而不是一个 url.\n\n#### 如何保证在 directive 渲染完成后执行函数\n\n实在不能避免使用 template_url 来定义模板,目前一种可行办法是使用$timeout service\n\n使用$timeout,这个 service, 当后面不带时间参数时,\n\n定义的回调函数将在 angularjs 渲染完成之后调用.\n\n相当于 jquery 的 document.ready()函数\n\n```\n.directive('myCustomer', [$timeout, function($timeout){\n  return {\n    templateUrl: 'my-customer.html',\n    replace: true,\n    link: function (scope, element, attrs) {\n      $timeout(function (){\n        //do something when angularjs loaded\n      })\n    }\n  }\n}])\n\n```\n\n## 实时更新 directive\n\n默认 directive 只在生成的时候 link.\n\n需要实时更新则要使用 scope.watch,来检测 scope 的修改\n\n```\n\n.directive('myCustomer', function(){\n  return {\n    templateUrl: 'my-customer.html',\n    replace: true,\n    link: function (scope, element, attrs) {\n\n      scope.$watch(attrs.filter, function (newValue) {\n        //filter属性可能是用其他的 scope 中传递过来的值        \n        scope.filter = newValue\n      })\n\n    }\n  }\n})\n\n```\n\n## 如何动态获取 directive 的 name\n\n比如定义了几个功能相似的 directive, 又不想用属性来区分,而是想要用 directive name 来区分.\n\n我定义了一个 chart 的 directive, 但是我还想定义几个叫做 pie,bar 和 line 的 directive \n来作为 chart type='pie'|'bar'|'line' 的别名,这个时候想要动态获取一下 directive 来带入到一个生成 directive 的函数中.\n\n需要动态获得 directive 的 name,link 函数无法获取 directive 的name, 这个时候就可以使用compile 函数.\n\n```\ncompile: function(cElem, cAttrs, transclude) {\n      //get directive name\n      var name = this.name;\n      //link func\n      return function (scope, element, attrs) {\n          \n          //do somethin\n          myFunc(name)\n\n        });\n      }\n    }// end compile\n```\n\ncompile 函数定义就是会返回一个 link 函数,而 compile 的this 指针指向的就是 directive 对象.利用闭包就可以传递 name.\n\n需要注意的是当使用 compile 参数时, link 定义将会失效.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angular-directive","updated":1492103423000,"excerpt":"<p>最近要用 angularjs 制作一个报告模块,而表格插件还是使用基于 jquery 的插件.</p>\n<p>页面使用了 angularjs 的路由来加载页面.虽然可以在 onload 函数中编写图表的加载,但是这样很不优雅,也不方便维护.如果直接用 directive 来绘制图表和其他数据,这样后台就可以直接考虑把表格数据渲染在 html 上.不仅可以减少一部分数据接口api.也方便做静态化.</p>\n","_id":"argcc0bs1dalxjc7","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"angularjs概览","date":1488814479000,"tags":["zg2ebll2vb1jw72p","8p6a4n43ng1rxakg"],"content":"<p>用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.<br>趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"angularjs_基本概念\">angularjs 基本概念</h1>\n<ul>\n<li><strong>双向绑定</strong></li>\n</ul>\n<p>双向绑定现在已经不是一个新概念,大部分时间我们不用考虑怎么去刷新 DOM, (妈妈再也不用担心我乱绑定事件而导致界面卡了)<br>而主要去关心模型的变化,还有如何写 HTML 的表现.<br>不过有时候里面混着一堆 angularjs 的语句看起来也挺蛋疼的.但相比后端套模板,你连输入的数据是什么都不知道还是要好一点的</p>\n<p>当然,当把刷新权交给了框架,还是要了解一下什么时候 angularjs 会刷新我们的界面,而什么时候不会刷新,需要我们手动触发刷新($scope.$apply),</p>\n<p>可以参考一下这篇文章 <a href=\"http://blog.gejiawen.com/2014/07/14/usage-for-angularjs-scope-apply/\" target=\"_blank\" rel=\"external\">AngularJS的scope.$apply</a></p>\n<ul>\n<li><strong>依赖注入</strong></li>\n</ul>\n<p>依赖注入则更像是用一些奇技淫巧实现的js语法糖,来解决加载顺序的问题.以后有了 ES6 的import, 大概也就不需要了.</p>\n<ul>\n<li>module</li>\n</ul>\n<p>module应该算是Angularjs最小逻辑结构.其他的组件和功能都是绑定在 module 上来实现的.</p>\n<p>一般来说一个页面只有一个 ng-app 作为该块级元素的主 module, 当然你也可以定义多个.可以参考 <a href=\"http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page\" target=\"_blank\" rel=\"external\">multiple-ng-app-within-a-page</a>.</p>\n<p>根据功能模块来划分不同 module, 绑定不同的 controller,directive,provide, 最后通过依赖注入,引用到主 module. </p>\n<p>当你习惯了 angularjs 的编程思路之后, 自然而然就实现了前端功能逻辑的解耦.</p>\n<p><a href=\"\">angularjs学习笔记 — module</a></p>\n<ul>\n<li>controller</li>\n</ul>\n<p>喜闻乐见的 mvc 中的我们最熟悉的老朋友,恩,对它就是封装各种对模型操作和各种交互的地方.</p>\n<p>也可能是我们一开始写代码时,容易写的最臃肿的地方.</p>\n<p>不过还有什么地方能够比 controller 更像垃圾堆的地方了嘛╮(╯▽╰)╭</p>\n<p><a href=\"\">angularjs学习笔记 — controller</a></p>\n<ul>\n<li>directive</li>\n</ul>\n<p>directive 本身也可以封装一些独立的逻辑,作为一个逻辑组件.</p>\n<p>不过个人感觉它主要干的事情,是用来帮助我们解决一些重复的渲染,可以把它想象成一个 UI component 的封装.当然它能够做到的东西更多.</p>\n<p>另外我们常用的 ng-repeat,ng-if,ng-class 等等这些东西,都是angularjs 内建的 directive.</p>\n<p><a href=\"\">angularjs学习笔记 — directive</a></p>\n<ul>\n<li>provider(Service,Factory,Constant,Value等等)</li>\n</ul>\n<p>这块之前一直都是分开看的,一直到最近读了一篇文章才发现原来后面那些东西都是 provide 的一个特例.</p>\n<p>主要就是用于在 controller 之间共享一些对象,数据或者服务.</p>\n<p>因为是单例模型,所以可以保证数据的一致性.</p>\n<p>provider的概念其实很绕,首先用 provider 方法定义的 provider, 可以用 config 方法,传入一个providerName 的 Provider 后缀的变量进行定制.</p>\n<p>是不是听的很头晕.</p>\n<p>可以参考官方的 provider, $http 和 $httpProvider. 官方文档里的 provider 指的是这些在 config 里面依赖注入的 Provider 变量,然而这其实只是 provider 的副产品.</p>\n<p><a href=\"\">angularjs学习笔记 — provider</a></p>\n<ul>\n<li>test</li>\n</ul>\n<p>分了这么多模块,功能清晰了,然而如果出了问题,那么多的文件,你要去哪里 debug 呢?</p>\n<p>所以模块化和单元测试是分不开的两兄弟.</p>\n<p>不写单元测试的程序员,不是一个好美术~~</p>\n<p>angularjs 的测试模块也是非常强大,不仅有模块的 BDD 单元测试, 还直接集成了Browser 的 E2E 测试.</p>\n<p><a href=\"\">angularjs学习笔记 — Jusmine和 单元测试</a></p>\n","source":"_posts/angular-main.md","raw":"title: angularjs概览\ndate: 2017-03-06 23:34:39\ntags:\n- angularjs\n- 前端\n---\n\n用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.\n趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.\n\n<!--more-->\n\n#angularjs 基本概念\n\n* **双向绑定**\n\n双向绑定现在已经不是一个新概念,大部分时间我们不用考虑怎么去刷新 DOM, (妈妈再也不用担心我乱绑定事件而导致界面卡了)\n而主要去关心模型的变化,还有如何写 HTML 的表现.\n不过有时候里面混着一堆 angularjs 的语句看起来也挺蛋疼的.但相比后端套模板,你连输入的数据是什么都不知道还是要好一点的\n\n当然,当把刷新权交给了框架,还是要了解一下什么时候 angularjs 会刷新我们的界面,而什么时候不会刷新,需要我们手动触发刷新($scope.$apply),\n\n可以参考一下这篇文章 [AngularJS的scope.$apply](http://blog.gejiawen.com/2014/07/14/usage-for-angularjs-scope-apply/)\n\n* **依赖注入**\n\n依赖注入则更像是用一些奇技淫巧实现的js语法糖,来解决加载顺序的问题.以后有了 ES6 的import, 大概也就不需要了.\n\n* module\n\nmodule应该算是Angularjs最小逻辑结构.其他的组件和功能都是绑定在 module 上来实现的.\n\n一般来说一个页面只有一个 ng-app 作为该块级元素的主 module, 当然你也可以定义多个.可以参考 [multiple-ng-app-within-a-page](http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page).\n\n根据功能模块来划分不同 module, 绑定不同的 controller,directive,provide, 最后通过依赖注入,引用到主 module. \n\n当你习惯了 angularjs 的编程思路之后, 自然而然就实现了前端功能逻辑的解耦.\n\n[angularjs学习笔记 -- module]()\n\n* controller\n\n喜闻乐见的 mvc 中的我们最熟悉的老朋友,恩,对它就是封装各种对模型操作和各种交互的地方.\n\n也可能是我们一开始写代码时,容易写的最臃肿的地方.\n\n不过还有什么地方能够比 controller 更像垃圾堆的地方了嘛╮(╯▽╰)╭\n\n[angularjs学习笔记 -- controller]()\n\n* directive\n\ndirective 本身也可以封装一些独立的逻辑,作为一个逻辑组件.\n\n不过个人感觉它主要干的事情,是用来帮助我们解决一些重复的渲染,可以把它想象成一个 UI component 的封装.当然它能够做到的东西更多.\n\n另外我们常用的 ng-repeat,ng-if,ng-class 等等这些东西,都是angularjs 内建的 directive.\n\n[angularjs学习笔记 -- directive]()\n\n* provider(Service,Factory,Constant,Value等等)\n\n这块之前一直都是分开看的,一直到最近读了一篇文章才发现原来后面那些东西都是 provide 的一个特例.\n\n主要就是用于在 controller 之间共享一些对象,数据或者服务.\n\n因为是单例模型,所以可以保证数据的一致性.\n\nprovider的概念其实很绕,首先用 provider 方法定义的 provider, 可以用 config 方法,传入一个providerName 的 Provider 后缀的变量进行定制.\n\n是不是听的很头晕.\n\n可以参考官方的 provider, $http 和 $httpProvider. 官方文档里的 provider 指的是这些在 config 里面依赖注入的 Provider 变量,然而这其实只是 provider 的副产品.\n\n[angularjs学习笔记 -- provider]()\n\n* test\n\n分了这么多模块,功能清晰了,然而如果出了问题,那么多的文件,你要去哪里 debug 呢?\n\n所以模块化和单元测试是分不开的两兄弟.\n\n不写单元测试的程序员,不是一个好美术~~\n\nangularjs 的测试模块也是非常强大,不仅有模块的 BDD 单元测试, 还直接集成了Browser 的 E2E 测试.\n\n[angularjs学习笔记 -- Jusmine和 单元测试]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angular-main","updated":1491931999000,"excerpt":"<p>用了 angularjs(1.x) 也有一段时间了,然而之前的学习笔记计划全都荒废了.<br>趁着自己要对组内新人进行一些分享,记忆中的一些细节还没有变的模糊,赶紧总结一下个人的学习经验.</p>\n","_id":"rduhf4qrow0a8w2d","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"angularjs学习笔记 -- module","date":1490027611000,"tags":["zg2ebll2vb1jw72p","8p6a4n43ng1rxakg"],"content":"<p>module 是 angularjs 里面用来组织功能的一个集合.</p>\n<p>可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.</p>\n<p>我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-entry_point\">1.entry point</h2>\n<p>如同大部分程序都会有一个 main 函数.或者说像使用 browserfy 打包也需要一个 main.js. </p>\n<p>同样我们也需要一个 main module,作为我们 app 的入口.</p>\n<p>这个 main module 是使用 ng-app 来定义的.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;div ng-app=<span class=\"string\">\"myApp\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></span></div><div class=\"line\">    World</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>这样 angularjs 就会从这个对应 ng-app 名称的 module 开始加载我们的模块.通过层层的依赖注入,初始化各个模块,各个 service, 然后生成虚拟 dom, 渲染我们的页面.</p>\n<h2 id=\"2-run_和_config\">2.run 和 config</h2>\n<p>module除了常见的使用.链式操作来定义自己的 Service, Controller, Directive, Filter等等,主要就有额外的两个方法.</p>\n<p>config 和 run</p>\n<p><strong>run</strong></p>\n<p>run 函数很容易理解,它就是 module 开始初始化时调用的函数,相当于 init 函数.在这里我们可以为我们的模块进行一些初始化的功能.需要注意的是,在 run 函数调用时所有的 provider (Service,Constant,Filter,Provider等等) 是已经初始化好了的.</p>\n<p>所以可以直接使用以来注入,来使用 service 中提供的方法或者类.</p>\n<p>比如官方的这个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.service'</span>, [])</div><div class=\"line\"></div><div class=\"line\">  .value(<span class=\"string\">'greeter'</span>, {</div><div class=\"line\">    salutation: <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    localize: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(localization)</span> </span>{</div><div class=\"line\">      <span class=\"keyword\">this</span>.salutation = localization.salutation;</div><div class=\"line\">    },</div><div class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name)</span> </span>{</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salutation + <span class=\"string\">' '</span> + name + <span class=\"string\">'!'</span>;</div><div class=\"line\">    }</div><div class=\"line\">  })</div><div class=\"line\"></div><div class=\"line\">  .value(<span class=\"string\">'user'</span>, {</div><div class=\"line\">    load: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name)</span> </span>{</div><div class=\"line\">      <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    }</div><div class=\"line\">  });</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.directive'</span>, []);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl.filter'</span>, []);</div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'xmpl'</span>, [<span class=\"string\">'xmpl.service'</span>, <span class=\"string\">'xmpl.directive'</span>, <span class=\"string\">'xmpl.filter'</span>])</div><div class=\"line\"></div><div class=\"line\">  .run(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(greeter, user)</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// This is effectively part of the main method initialization code</span></div><div class=\"line\">    greeter.localize({</div><div class=\"line\">      salutation: <span class=\"string\">'Bonjour'</span></div><div class=\"line\">    });</div><div class=\"line\">    user.load(<span class=\"string\">'World'</span>);</div><div class=\"line\">  })</div><div class=\"line\"></div><div class=\"line\">  .controller(<span class=\"string\">'XmplController'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope, greeter, user)</span> </span>{</div><div class=\"line\">    $scope.greeting = greeter.greet(user.name);</div><div class=\"line\">  });</div></pre></td></tr></table></figure>\n\n<p><strong>config</strong></p>\n<p>config 方法则调用的更早,是在各种 provide 初始化的时候,对 provider 进行配置.</p>\n<p>也可以通过注入 $provide, $compileProvider, $filterProvider几个官方 provider 来注册 provider.</p>\n<p>这句话很绕,这三个以来注入的官方功能也是一个 provider.用这个 provider 可以给模块直接注册更多的 provider.</p>\n<p>比如官方文档这里的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myModule'</span>, []).</div><div class=\"line\">  value(<span class=\"string\">'a'</span>, <span class=\"number\">123</span>).</div><div class=\"line\">  factory(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{ <span class=\"keyword\">return</span> <span class=\"number\">123</span>; }).</div><div class=\"line\">  directive(<span class=\"string\">'directiveName'</span>, ...).</div><div class=\"line\">  filter(<span class=\"string\">'filterName'</span>, ...);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is same as</span></div><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myModule'</span>, []).</div><div class=\"line\">  config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($provide, $compileProvider, $filterProvider)</span> </span>{</div><div class=\"line\">    $provide.value(<span class=\"string\">'a'</span>, <span class=\"number\">123</span>);</div><div class=\"line\">    $provide.factory(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{ <span class=\"keyword\">return</span> <span class=\"number\">123</span>; });</div><div class=\"line\">    $compileProvider.directive(<span class=\"string\">'directiveName'</span>, ...);</div><div class=\"line\">    $filterProvider.register(<span class=\"string\">'filterName'</span>, ...);</div><div class=\"line\">  });</div></pre></td></tr></table></figure>\n\n<p>这两种方法是等价的.</p>\n<p>angularjs中一个模块的加载顺序大致是这样</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">1. </span>app.config()</div><div class=\"line\"><span class=\"bullet\">2. </span>provider.$get</div><div class=\"line\"><span class=\"bullet\">3. </span>app.run()</div><div class=\"line\"><span class=\"bullet\">4. </span>directive's compile functions (if they are found in the dom)</div><div class=\"line\"><span class=\"bullet\">5. </span>app.controller()</div><div class=\"line\"><span class=\"bullet\">6. </span>directive's link functions (again, if found)</div></pre></td></tr></table></figure>\n\n<p>config 更主要的作用就是 config provider.(是否感觉我又手抽了),因为 config 方法调用是在 provider 初始化($get)之前,所以可以在 config 方法中修改一些provider初始变量,来达到配置 provider 表现的目的.</p>\n<p>provider 估计是 angularjs 里面最容易绕晕的概念,然而不用怕,下面这篇文章会带你完整揭开 provider 的面纱(大概).</p>\n<p><a href=\"\">angularjs学习笔记 — provider</a></p>\n<blockquote>\n<p>附录</p>\n<p><a href=\"/2017/03/06/angular-main/\">angularjs总览</a></p>\n</blockquote>\n","source":"_posts/angular-module.md","raw":"title: angularjs学习笔记 -- module\ndate: 2017-03-21 00:33:31\ntags:\n- angularjs\n- 前端\n---\n\nmodule 是 angularjs 里面用来组织功能的一个集合.\n\n可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.\n\n我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.\n\n<!--more-->\n\n## 1.entry point\n\n如同大部分程序都会有一个 main 函数.或者说像使用 browserfy 打包也需要一个 main.js. \n\n同样我们也需要一个 main module,作为我们 app 的入口.\n\n这个 main module 是使用 ng-app 来定义的.\n\n```javascript\n\n<div ng-app=\"myApp\">\n  <div>\n    {{ 'World' || greet }}\n  </div>\n</div>\n\n```\n\n这样 angularjs 就会从这个对应 ng-app 名称的 module 开始加载我们的模块.通过层层的依赖注入,初始化各个模块,各个 service, 然后生成虚拟 dom, 渲染我们的页面.\n\n## 2.run 和 config\n\nmodule除了常见的使用.链式操作来定义自己的 Service, Controller, Directive, Filter等等,主要就有额外的两个方法.\n\nconfig 和 run\n\n**run**\n\nrun 函数很容易理解,它就是 module 开始初始化时调用的函数,相当于 init 函数.在这里我们可以为我们的模块进行一些初始化的功能.需要注意的是,在 run 函数调用时所有的 provider (Service,Constant,Filter,Provider等等) 是已经初始化好了的.\n\n所以可以直接使用以来注入,来使用 service 中提供的方法或者类.\n\n比如官方的这个例子\n```javascript\n\nangular.module('xmpl.service', [])\n\n  .value('greeter', {\n    salutation: 'Hello',\n    localize: function(localization) {\n      this.salutation = localization.salutation;\n    },\n    greet: function(name) {\n      return this.salutation + ' ' + name + '!';\n    }\n  })\n\n  .value('user', {\n    load: function(name) {\n      this.name = name;\n    }\n  });\n\nangular.module('xmpl.directive', []);\n\nangular.module('xmpl.filter', []);\n\nangular.module('xmpl', ['xmpl.service', 'xmpl.directive', 'xmpl.filter'])\n\n  .run(function(greeter, user) {\n    // This is effectively part of the main method initialization code\n    greeter.localize({\n      salutation: 'Bonjour'\n    });\n    user.load('World');\n  })\n\n  .controller('XmplController', function($scope, greeter, user) {\n    $scope.greeting = greeter.greet(user.name);\n  });\n```\n\n**config**\n\nconfig 方法则调用的更早,是在各种 provide 初始化的时候,对 provider 进行配置.\n\n也可以通过注入 $provide, $compileProvider, $filterProvider几个官方 provider 来注册 provider.\n\n这句话很绕,这三个以来注入的官方功能也是一个 provider.用这个 provider 可以给模块直接注册更多的 provider.\n\n比如官方文档这里的例子\n\n```javascript\n\nangular.module('myModule', []).\n  value('a', 123).\n  factory('a', function() { return 123; }).\n  directive('directiveName', ...).\n  filter('filterName', ...);\n\n// is same as\n\nangular.module('myModule', []).\n  config(function($provide, $compileProvider, $filterProvider) {\n    $provide.value('a', 123);\n    $provide.factory('a', function() { return 123; });\n    $compileProvider.directive('directiveName', ...);\n    $filterProvider.register('filterName', ...);\n  });\n```\n\n这两种方法是等价的.\n\nangularjs中一个模块的加载顺序大致是这样\n\n```\n1. app.config()\n2. provider.$get\n3. app.run()\n4. directive's compile functions (if they are found in the dom)\n5. app.controller()\n6. directive's link functions (again, if found)\n\n```\n\nconfig 更主要的作用就是 config provider.(是否感觉我又手抽了),因为 config 方法调用是在 provider 初始化($get)之前,所以可以在 config 方法中修改一些provider初始变量,来达到配置 provider 表现的目的.\n\n\nprovider 估计是 angularjs 里面最容易绕晕的概念,然而不用怕,下面这篇文章会带你完整揭开 provider 的面纱(大概).\n\n[angularjs学习笔记 -- provider]()\n\n\n> 附录\n\n> [angularjs总览](/2017/03/06/angular-main/)\n\n\n\n","slug":"angular-module","updated":1490030477000,"excerpt":"<p>module 是 angularjs 里面用来组织功能的一个集合.</p>\n<p>可以把一打的功能(包含 controller,directive,service 等等),封装到一个 module 里,来对外部提供一个功能或者一系列功能.</p>\n<p>我们所使用的大部分的  angularjs 的插件都是一个 module, 这样当我们把一个 module 依赖注入到我们的模块中,就可以使用这个 module 的全部功能.</p>\n","_id":"beif44ckfybzx5as","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"angularjs学习笔记 -- provider","date":1490030033000,"tags":["zg2ebll2vb1jw72p","8p6a4n43ng1rxakg"],"content":"<p>constant<br>factory<br>provider</p>\n","source":"_posts/angular-provider.md","raw":"title: angularjs学习笔记 -- provider\ndate: 2017-03-21 01:13:53\ntags:\n- angularjs\n- 前端\n---\n\n\nconstant\nfactory\nprovider\n\n\n\n","slug":"angular-provider","updated":1492103412000,"excerpt":"","_id":"u0e53noywq91xasg","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"angularjs的ng-model和表单验证(form-validate)","date":1490544932000,"tags":["zg2ebll2vb1jw72p","8p6a4n43ng1rxakg","xwn3tjfhj0xhku2b"],"content":"<p>由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.<br>所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.</p>\n<p>然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"ngmodel\">ngmodel</h2>\n<p>按照官方指南, ngmodel 主要的功能有以下几个部分:</p>\n<ul>\n<li>绑定视图到 model 对象上, 需要依赖比如input, textarea 或者 select这些 directive.(原来这些标准 html 输入控件也被 angular 写成了一个 directive!)</li>\n<li>提供表单验证(比如 html5标准的 required, number, email, url)</li>\n<li>保存被绑定表单输入控件的状态(valid/invalid, dirty/pristine, touched/untouched, validation errors)</li>\n<li>设置对应的 css class和动画(ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-empty, ng-not-empty)</li>\n<li><strong>注册</strong>输入控件到它的父表单</li>\n</ul>\n<p>原来之前我一直了解到的只有它的第一点,它还有这么多功能.</p>\n<p>然而就连第一点,我都没有透彻的理解,实在是惭愧.</p>\n<p>先从第一点讲起.其他几点则在第二部分表单验证里面说明.</p>\n<p>ngmodel 可以在以下几种输入控件(已经被angular重写成了directive)中使用.</p>\n<p>让我们过一遍这些已经耳熟能详的标准输入控件在 angularjs 里面被进行了什么样子的神奇改造.</p>\n<h3 id=\"input\">input</h3>\n<p><strong>[type=text]</strong></p>\n<p>text 控件是其他 input 类型的基础,其他 input 控件大多数的属性是从这个属性的控件继承(directive的继承?)过去的.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input <span class=\"variable\">type=</span><span class=\"string\">\"text\"</span></div><div class=\"line\">       <span class=\"variable\">ng-model=</span><span class=\"string\">\"string\"</span></div><div class=\"line\">       [<span class=\"variable\">name=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">required=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-required=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-minlength=</span><span class=\"string\">\"number\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-maxlength=</span><span class=\"string\">\"number\"</span>]</div><div class=\"line\">       [<span class=\"variable\">pattern=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-pattern=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-change=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-trim=</span><span class=\"string\">\"boolean\"</span>]&gt;</div></pre></td></tr></table></figure>\n\n<p>这里的 ng-model 只是 input 的一个参数.用于表明这个数据绑定到当前scope哪个变量中.</p>\n<p>name, 很容易漏掉的一个属性,这个属性不只是原来的 input 的 name, 同时 angularjs 也会使用这个 name 注册到当前的 form(directive) 之中.</p>\n<p>所以看起来一样的 input 和 form 以及 select 等等这些标准 html 控件实际上都被用 directive 包装了一层,而让所有的控件数据内容在 angularjs 的管理下.</p>\n<p>仔细想想也是需要这样,才能方便的实现双绑.</p>\n<p>required, ng-minlength, pattern 用来做表单验证的属性,后面统一讲.</p>\n<p>ng-change 就是 onchange.</p>\n<p>ng-trim input 自带了去掉首尾空格的功能,很好,很强大.也可以设置属性为 false 来关闭.</p>\n<p>ng 属性和不带 ng 属性主要是否支持 angularjs 表达式的区别.</p>\n<p><strong>[type==checkbox]</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input <span class=\"variable\">type=</span><span class=\"string\">\"checkbox\"</span></div><div class=\"line\">       <span class=\"variable\">ng-model=</span><span class=\"string\">\"string\"</span></div><div class=\"line\">       [<span class=\"variable\">name=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-true-value=</span><span class=\"string\">\"expression\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-false-value=</span><span class=\"string\">\"expression\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-change=</span><span class=\"string\">\"string\"</span>]&gt;</div></pre></td></tr></table></figure>\n\n<p>checkbox 就有点特别了</p>\n<p>当没有设置 ng-true-value 和 ng-true-value, 选中 checkbox 会把绑定的变量设置成 true, 反之则为 false.</p>\n<p>然而它居然没有默认的 value 属性, 也就是你设置 value 是不起作用的.只有设置ng-true-value 和 ng-true-value才能设置对应的值.</p>\n<p>曾经就是在这里被坑到了…</p>\n<p>另外如果设置对应 ng-model 绑定的变量属性为 true 或者 ng-true-value 均不能在重绘时使 checkbox 被设置为勾选??</p>\n<p>这个时候就需要使用 ng-check 来设置初始值.</p>\n<p><strong>[type==radio]</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input <span class=\"variable\">type=</span><span class=\"string\">\"radio\"</span></div><div class=\"line\">       <span class=\"variable\">ng-model=</span><span class=\"string\">\"string\"</span></div><div class=\"line\">       <span class=\"variable\">value=</span><span class=\"string\">\"string\"</span></div><div class=\"line\">       [<span class=\"variable\">name=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-change=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       <span class=\"variable\">ng-value=</span><span class=\"string\">\"string\"</span>&gt;</div></pre></td></tr></table></figure>\n\n<p>radio就比较中规中矩了,选择时,设置为 value 或者 ng-value.</p>\n<p><strong>input[range]</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input <span class=\"variable\">type=</span><span class=\"string\">\"range\"</span></div><div class=\"line\">       <span class=\"variable\">ng-model=</span><span class=\"string\">\"string\"</span></div><div class=\"line\">       [<span class=\"variable\">name=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">min=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">max=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">step=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-change=</span><span class=\"string\">\"string\"</span>]</div><div class=\"line\">       [<span class=\"variable\">ng-checked=</span><span class=\"string\">\"expression\"</span>]&gt;</div></pre></td></tr></table></figure>\n\n<p>标准的 rage 虽然用的不多,不过也有一些不同的地方</p>\n<p>对于不支持 rage 控件的浏览器, rage 会变成一个普通的 input 框,依然包含 binding,validation 和数值的自动转换.<br>对于支持 rage 控件的浏览器,浏览器并不允许 rage 赋值成一个非法值.</p>\n<p>也就是说,</p>\n<p>1.任何非数值都会被赋值成 (max + min) / 2<br>2.任何数字超过 max 和 min 都会赋值成 max 或者 min.如果有 step 设置则是按照 step 能到的值来进行赋值.</p>\n<p>所以这个控件永远不会有 requied 或者 min 和 max 的 error.</p>\n<p>而且 range 也不能够使用 ngMax,ngMin,ngStep 这些 directive,因为这些 directive 并没有设置对应的属性,导致初始化 dom 时,浏览器会使用默认值min = 0, max = 100, and step = 1,来进行初始化.</p>\n<p>基本上标准的 html5 的 rage 浏览器支持并不是很完善,推荐使用 css 和 js 来实现自定义的 rage 插件会更好一点.</p>\n<h3 id=\"select\">select</h3>\n<p>select 基本没有太多要讲的. </p>\n<p>ngModel 会绑定对应被选择 option 的 value.</p>\n<p>一个问题就是使用 ng-repeat 还是 ng-options 来生成 options.</p>\n<p>官方推荐是使用 ng-options. 因为 ng-options 使用了 DocumentFragment 来生成每个 options,可以减少内存占用和渲染占用时间,并且不会生成一个内置的循环用的 scope.</p>\n<p>另外就是发现之前自己一直没有认真看 html, 原来 select 还有 size 这么一个属性,用于控制下拉列表的显示选项个数,超过这个个数就会出现滚动条,默认值是0,由浏览器自行控制.</p>\n<p>其他控件大同小异,可以参考官方文档,这里就不多说啦.</p>\n<hr>\n<h2 id=\"表单验证\">表单验证</h2>\n<p>一个简简单单的 ngmodel, 就几乎做完了你所想到的表单验证几乎需要的全部功能.只要简单封装几乎就能够满足大部分需求.</p>\n<p>简直不敢让人相信, angularjs 原来内置了一个这么有用的表单验证功能.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form</div><div class=\"line\">  [name=<span class=\"string\">\"string\"</span>]&gt;</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n\n<p>实际上 form 也被实现成了一个 directive, 所以在需要进行表单验证的 form 控件,设置一个 name</p>\n<p>这样在当前 scope 里面的时候就会多出一个以 name 属性为命名的变量, 这个变量会存储当前 form 的验证结果.</p>\n<p>另外虽然 html 里不允许 form 嵌套,但是在 angularjs 里可以使用 ngForm 标签来进行嵌套. ngForm 是 form directive 的别名.</p>\n<p>其中 form 还会被设置一些 class</p>\n<p>这里直接引用官网</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng-valid <span class=\"keyword\">is</span> <span class=\"keyword\">set</span> <span class=\"keyword\">if</span> the form <span class=\"keyword\">is</span> valid.</div><div class=\"line\">ng-invalid <span class=\"keyword\">is</span> <span class=\"keyword\">set</span> <span class=\"keyword\">if</span> the form <span class=\"keyword\">is</span> invalid.</div><div class=\"line\">ng-pending <span class=\"keyword\">is</span> <span class=\"keyword\">set</span> <span class=\"keyword\">if</span> the form <span class=\"keyword\">is</span> pending.</div><div class=\"line\">ng-pristine <span class=\"keyword\">is</span> <span class=\"keyword\">set</span> <span class=\"keyword\">if</span> the form <span class=\"keyword\">is</span> pristine.</div><div class=\"line\">ng-dirty <span class=\"keyword\">is</span> <span class=\"keyword\">set</span> <span class=\"keyword\">if</span> the form <span class=\"keyword\">is</span> dirty.</div><div class=\"line\">ng-submitted <span class=\"keyword\">is</span> <span class=\"keyword\">set</span> <span class=\"keyword\">if</span> the form was submitted</div></pre></td></tr></table></figure>\n\n<p>使用 ngSubmit 来进行提交</p>\n<p>因为 model 绑定之后,任何输入都会导致 model 变化,有时候可能不想校验做的这么灵敏.只是希望在 blur 或者 click 事件之后才更新 model.<br>就要使用ngModelOptions这个设置, 来延迟 model 绑定的变化.</p>\n<h3 id=\"验证中可以使用的属性\">验证中可以使用的属性</h3>\n<p>只要控件都配置了各种验证条件,那么改 form 中就会有以下的属性来直接提供验证结果,把对应的变量用于绑定验证成功或者失败的提示以及 css, 即可几乎不用写 js实现表单验证.</p>\n<p>$valid表示控件验证通过, $invalid则和$valid相反</p>\n<p>$error 则为一个错误内容的字典,其中的key为对应的检测属性,值一般为 true, 不存在的错误不会在$error中.</p>\n<p>比如 required, minlength, maxlength, pattern, min, max.</p>\n<p>对于 input[type=email], 还有特殊的 email 类型的错误.</p>\n<p>说了这么多,来看一个例子吧.</p>\n<iframe width=\"100%\" height=\"600\" scroll=\"no\" src=\"//jsfiddle.net/nekorice/dq0f3s8L/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/angluar-form.md","raw":"title: angularjs的ng-model和表单验证(form-validate)\ndate: 2017-03-27 00:15:32\ntags:\n- angularjs\n- 前端\n- form\n---\n\n由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.\n所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.\n\n然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.\n\n<!--more-->\n\n## ngmodel\n\n按照官方指南, ngmodel 主要的功能有以下几个部分:\n\n* 绑定视图到 model 对象上, 需要依赖比如input, textarea 或者 select这些 directive.(原来这些标准 html 输入控件也被 angular 写成了一个 directive!)\n* 提供表单验证(比如 html5标准的 required, number, email, url)\n* 保存被绑定表单输入控件的状态(valid/invalid, dirty/pristine, touched/untouched, validation errors)\n* 设置对应的 css class和动画(ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched, ng-empty, ng-not-empty)\n* **注册**输入控件到它的父表单\n\n原来之前我一直了解到的只有它的第一点,它还有这么多功能.\n\n然而就连第一点,我都没有透彻的理解,实在是惭愧.\n\n先从第一点讲起.其他几点则在第二部分表单验证里面说明.\n\nngmodel 可以在以下几种输入控件(已经被angular重写成了directive)中使用.\n\n让我们过一遍这些已经耳熟能详的标准输入控件在 angularjs 里面被进行了什么样子的神奇改造.\n\n### input\n\n**[type=text]**\n\ntext 控件是其他 input 类型的基础,其他 input 控件大多数的属性是从这个属性的控件继承(directive的继承?)过去的.\n\n```\n<input type=\"text\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [required=\"string\"]\n       [ng-required=\"string\"]\n       [ng-minlength=\"number\"]\n       [ng-maxlength=\"number\"]\n       [pattern=\"string\"]\n       [ng-pattern=\"string\"]\n       [ng-change=\"string\"]\n       [ng-trim=\"boolean\"]>\n\n```\n\n这里的 ng-model 只是 input 的一个参数.用于表明这个数据绑定到当前scope哪个变量中.\n\nname, 很容易漏掉的一个属性,这个属性不只是原来的 input 的 name, 同时 angularjs 也会使用这个 name 注册到当前的 form(directive) 之中.\n\n所以看起来一样的 input 和 form 以及 select 等等这些标准 html 控件实际上都被用 directive 包装了一层,而让所有的控件数据内容在 angularjs 的管理下.\n\n仔细想想也是需要这样,才能方便的实现双绑.\n\nrequired, ng-minlength, pattern 用来做表单验证的属性,后面统一讲.\n\nng-change 就是 onchange.\n\nng-trim input 自带了去掉首尾空格的功能,很好,很强大.也可以设置属性为 false 来关闭.\n\nng 属性和不带 ng 属性主要是否支持 angularjs 表达式的区别.\n\n**[type==checkbox]**\n\n```\n<input type=\"checkbox\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [ng-true-value=\"expression\"]\n       [ng-false-value=\"expression\"]\n       [ng-change=\"string\"]>\n```\n\ncheckbox 就有点特别了\n\n当没有设置 ng-true-value 和 ng-true-value, 选中 checkbox 会把绑定的变量设置成 true, 反之则为 false.\n\n然而它居然没有默认的 value 属性, 也就是你设置 value 是不起作用的.只有设置ng-true-value 和 ng-true-value才能设置对应的值.\n\n曾经就是在这里被坑到了...\n\n另外如果设置对应 ng-model 绑定的变量属性为 true 或者 ng-true-value 均不能在重绘时使 checkbox 被设置为勾选??\n\n这个时候就需要使用 ng-check 来设置初始值.\n\n**[type==radio]**\n\n```\n<input type=\"radio\"\n       ng-model=\"string\"\n       value=\"string\"\n       [name=\"string\"]\n       [ng-change=\"string\"]\n       ng-value=\"string\">\n```\n\nradio就比较中规中矩了,选择时,设置为 value 或者 ng-value.\n\n**input[range]**\n\n```\n<input type=\"range\"\n       ng-model=\"string\"\n       [name=\"string\"]\n       [min=\"string\"]\n       [max=\"string\"]\n       [step=\"string\"]\n       [ng-change=\"string\"]\n       [ng-checked=\"expression\"]>\n```\n\n标准的 rage 虽然用的不多,不过也有一些不同的地方\n\n对于不支持 rage 控件的浏览器, rage 会变成一个普通的 input 框,依然包含 binding,validation 和数值的自动转换.\n对于支持 rage 控件的浏览器,浏览器并不允许 rage 赋值成一个非法值.\n\n也就是说,\n\n1.任何非数值都会被赋值成 (max + min) / 2\n2.任何数字超过 max 和 min 都会赋值成 max 或者 min.如果有 step 设置则是按照 step 能到的值来进行赋值.\n\n所以这个控件永远不会有 requied 或者 min 和 max 的 error.\n\n而且 range 也不能够使用 ngMax,ngMin,ngStep 这些 directive,因为这些 directive 并没有设置对应的属性,导致初始化 dom 时,浏览器会使用默认值min = 0, max = 100, and step = 1,来进行初始化.\n\n基本上标准的 html5 的 rage 浏览器支持并不是很完善,推荐使用 css 和 js 来实现自定义的 rage 插件会更好一点.\n\n\n### select\n\nselect 基本没有太多要讲的. \n\nngModel 会绑定对应被选择 option 的 value.\n\n一个问题就是使用 ng-repeat 还是 ng-options 来生成 options.\n\n官方推荐是使用 ng-options. 因为 ng-options 使用了 DocumentFragment 来生成每个 options,可以减少内存占用和渲染占用时间,并且不会生成一个内置的循环用的 scope.\n\n另外就是发现之前自己一直没有认真看 html, 原来 select 还有 size 这么一个属性,用于控制下拉列表的显示选项个数,超过这个个数就会出现滚动条,默认值是0,由浏览器自行控制.\n\n其他控件大同小异,可以参考官方文档,这里就不多说啦.\n\n---\n\n## 表单验证\n\n一个简简单单的 ngmodel, 就几乎做完了你所想到的表单验证几乎需要的全部功能.只要简单封装几乎就能够满足大部分需求.\n\n简直不敢让人相信, angularjs 原来内置了一个这么有用的表单验证功能.\n\n```\n<form\n  [name=\"string\"]>\n...\n</form>\n```\n\n实际上 form 也被实现成了一个 directive, 所以在需要进行表单验证的 form 控件,设置一个 name\n\n这样在当前 scope 里面的时候就会多出一个以 name 属性为命名的变量, 这个变量会存储当前 form 的验证结果.\n\n另外虽然 html 里不允许 form 嵌套,但是在 angularjs 里可以使用 ngForm 标签来进行嵌套. ngForm 是 form directive 的别名.\n\n其中 form 还会被设置一些 class\n\n这里直接引用官网\n\n```\nng-valid is set if the form is valid.\nng-invalid is set if the form is invalid.\nng-pending is set if the form is pending.\nng-pristine is set if the form is pristine.\nng-dirty is set if the form is dirty.\nng-submitted is set if the form was submitted\n```\n\n使用 ngSubmit 来进行提交\n\n\n\n因为 model 绑定之后,任何输入都会导致 model 变化,有时候可能不想校验做的这么灵敏.只是希望在 blur 或者 click 事件之后才更新 model.\n就要使用ngModelOptions这个设置, 来延迟 model 绑定的变化.\n\n\n### 验证中可以使用的属性\n\n只要控件都配置了各种验证条件,那么改 form 中就会有以下的属性来直接提供验证结果,把对应的变量用于绑定验证成功或者失败的提示以及 css, 即可几乎不用写 js实现表单验证.\n\n$valid表示控件验证通过, $invalid则和$valid相反\n\n$error 则为一个错误内容的字典,其中的key为对应的检测属性,值一般为 true, 不存在的错误不会在$error中.\n\n比如 required, minlength, maxlength, pattern, min, max.\n\n对于 input[type=email], 还有特殊的 email 类型的错误.\n \n\n说了这么多,来看一个例子吧.\n\n\n<iframe width=\"100%\" height=\"600\" scroll=\"no\" src=\"//jsfiddle.net/nekorice/dq0f3s8L/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"angluar-form","updated":1492101634000,"excerpt":"<p>由于接触 angularjs, 并且拿它来制作的功能中很少有表单的应用.<br>所以有很长一段时间都没有怎么用到ng-modal, 只觉得这个directive就是个用来绑定 form 中的变量, 开发起来很方便.</p>\n<p>然而今天开始更详细的使用 angularjs 来制作表单应用的时候,才发现自己原来把它想象的太简单了.</p>\n","_id":"iwoc0smr7voxzrgy","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"angular的directive","date":1491843423000,"tags":["zg2ebll2vb1jw72p","oblo0hbf2620lwuw","nh17cyzza93zrvtd"],"content":"<p>之前一直以为 directive 只是一种简单的渲染模板的功能.</p>\n<p>随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. </p>\n<a id=\"more\"></a>\n\n<h2 id=\"directive_的运行机制\">directive 的运行机制</h2>\n<p>link</p>\n<p>controller</p>\n<h2 id=\"directive_的编写\">directive 的编写</h2>\n<p>以前写过一篇,这里直接列一个快速清单.</p>\n","source":"_posts/angular-direct.md","raw":"title: angular的directive\ndate: 2017-04-11 00:57:03\ntags:\n- angularjs\n- directive\n- js\n---\n\n之前一直以为 directive 只是一种简单的渲染模板的功能.\n\n随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. \n\n<!--more-->\n\n## directive 的运行机制\n\nlink\n\ncontroller\n\n\n## directive 的编写\n\n以前写过一篇,这里直接列一个快速清单.\n\n\n\n\n","slug":"angular-direct","updated":1492103480000,"excerpt":"<p>之前一直以为 directive 只是一种简单的渲染模板的功能.</p>\n<p>随着使用的深入,才察觉到看似最简单的 directive 却藏着深深的奥秘. </p>\n","_id":"jjkoetx4cq6n5s2t","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"webpack2学习笔记","date":1491843452000,"tags":["0fn1yk02v4z46syh","618uovi85dexjj9q"],"content":"<p>之前一直在用 gulp 来进行前端持续集成和打包.</p>\n<p>对于分散在各地的 html 模板没有什么好方法合并.</p>\n<p>最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.</p>\n<a id=\"more\"></a>\n\n<p>之前也关注过 webpack 一段时间,没想到到自己实际使用的时候,已经是 webpack2.x 了.</p>\n<p>google 搜索到的文档很多都是 webpack1.x 的,本来只是想写 webpack2的语法,结果还要去看 1.x 到2.x 的 migrate.</p>\n<p><a href=\"https://webpack.js.org/guides/migrating/\" target=\"_blank\" rel=\"external\">https://webpack.js.org/guides/migrating/</a></p>\n<h2 id=\"resolve_配置\">resolve 配置</h2>\n<h3 id=\"module\">module</h3>\n<p>查找模块的文件夹从modulesDirectories变成了module, 类似于 python 的 sys.path, require 模块的查找路径.</p>\n<h3 id=\"alias\">alias</h3>\n<p>起个别名,来方便简写, 节省力气打字.</p>\n<h3 id=\"extensions\">extensions</h3>\n<p>数组,表示省略的后缀名,默认只能省略 .js,.json</p>\n<h2 id=\"loaders(rule)_配置\">loaders(rule) 配置</h2>\n<p>webpack 里面改成了 rule, 但是仍然兼容 loaders 的写法.</p>\n<p>毕竟这些插件都还是叫 loader, 每添加一种新的 loader, 都要记得去 npm install 对应的 loader.</p>\n<p>rules 语法比起 loaders 语法, 也就是把级联和参数整理的更清晰了一点.</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> module: {</div><div class=\"line\"><span class=\"deletion\">-   loaders: [</span></div><div class=\"line\"><span class=\"addition\">+   rules: [</span></div><div class=\"line\">      {</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\"><span class=\"deletion\">-       loaders: [</span></div><div class=\"line\"><span class=\"deletion\">-         \"style-loader\",</span></div><div class=\"line\"><span class=\"deletion\">-         \"css-loader?modules=true\"</span></div><div class=\"line\"><span class=\"addition\">+       use: [</span></div><div class=\"line\"><span class=\"addition\">+         {</span></div><div class=\"line\"><span class=\"addition\">+           loader: \"style-loader\"</span></div><div class=\"line\"><span class=\"addition\">+         },</span></div><div class=\"line\"><span class=\"addition\">+         {</span></div><div class=\"line\"><span class=\"addition\">+           loader: \"css-loader\",</span></div><div class=\"line\"><span class=\"addition\">+           options: {</span></div><div class=\"line\"><span class=\"addition\">+             modules: true</span></div><div class=\"line\"><span class=\"addition\">+           }</span></div><div class=\"line\"><span class=\"addition\">+         }</span></div><div class=\"line\">        ]</div><div class=\"line\">      },</div><div class=\"line\">      {</div><div class=\"line\">        test: /\\.jsx$/,</div><div class=\"line\">        loader: \"babel-loader\", // Do not use \"use\" here</div><div class=\"line\">        options: {</div><div class=\"line\">          // ...</div><div class=\"line\">        }</div><div class=\"line\">      }</div><div class=\"line\">    ]</div><div class=\"line\">  }</div></pre></td></tr></table></figure>\n\n<p>pre-loader 和 post-loader 去掉了,变成了 rule的一个属性</p>\n<p>常用的 loaders 有:</p>\n<ul>\n<li><p>style-loader, css-loader, less-loader, sass-loader</p>\n</li>\n<li></li>\n</ul>\n<h2 id=\"其他配置\">其他配置</h2>\n<h3 id=\"target\">target</h3>\n<hr>\n<p>最后贴一下自己用的代码</p>\n<script async src=\"//jsfiddle.net/nekorice/sd0535ux/embed/js/\"></script>\n\n","source":"_posts/webpack.md","raw":"title: webpack2学习笔记\ndate: 2017-04-11 00:57:32\ntags:\n- webpack\n- 前端工程化\n---\n\n之前一直在用 gulp 来进行前端持续集成和打包.\n\n对于分散在各地的 html 模板没有什么好方法合并.\n\n最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.\n\n<!--more-->\n\n之前也关注过 webpack 一段时间,没想到到自己实际使用的时候,已经是 webpack2.x 了.\n\ngoogle 搜索到的文档很多都是 webpack1.x 的,本来只是想写 webpack2的语法,结果还要去看 1.x 到2.x 的 migrate.\n\n[https://webpack.js.org/guides/migrating/](https://webpack.js.org/guides/migrating/)\n\n## resolve 配置\n\n### module\n\n查找模块的文件夹从modulesDirectories变成了module, 类似于 python 的 sys.path, require 模块的查找路径.\n\n### alias\n\n起个别名,来方便简写, 节省力气打字.\n\n### extensions\n\n数组,表示省略的后缀名,默认只能省略 .js,.json\n\n\n\n\n\n## loaders(rule) 配置\n\nwebpack 里面改成了 rule, 但是仍然兼容 loaders 的写法.\n\n毕竟这些插件都还是叫 loader, 每添加一种新的 loader, 都要记得去 npm install 对应的 loader.\n\nrules 语法比起 loaders 语法, 也就是把级联和参数整理的更清晰了一点.\n\n```diff\n module: {\n-   loaders: [\n+   rules: [\n      {\n        test: /\\.css$/,\n-       loaders: [\n-         \"style-loader\",\n-         \"css-loader?modules=true\"\n+       use: [\n+         {\n+           loader: \"style-loader\"\n+         },\n+         {\n+           loader: \"css-loader\",\n+           options: {\n+             modules: true\n+           }\n+         }\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: \"babel-loader\", // Do not use \"use\" here\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n```\n\npre-loader 和 post-loader 去掉了,变成了 rule的一个属性\n\n常用的 loaders 有:\n\n* style-loader, css-loader, less-loader, sass-loader\n\n* \n\n\n##其他配置\n\n###target\n\n---\n\n最后贴一下自己用的代码\n\n<script async src=\"//jsfiddle.net/nekorice/sd0535ux/embed/js/\"></script>\n\n","slug":"webpack","updated":1492103525000,"excerpt":"<p>之前一直在用 gulp 来进行前端持续集成和打包.</p>\n<p>对于分散在各地的 html 模板没有什么好方法合并.</p>\n<p>最近刚好有一个可以自由使用技术的新项目,打算用 webpack 来试试.</p>\n","_id":"wvnm55wz4ewz330q","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"随笔","_id":"2dwbis6rb9emak2e","posts":[]},{"name":"随笔,测试","_id":"cd1vj3cxaf1xp2yi","posts":[]},{"name":"随笔 测试","_id":"fqymssf2hty52na0","posts":[]},{"name":"随笔;测试","_id":"ysnksby9wbj0h6qm","posts":[]},{"name":"测试","_id":"rlshu31u308p7q0o","posts":[]},{"name":"股市","_id":"q55sh0w2uxha6ijs","posts":[]},{"name":"日志，随笔","_id":"j56xgi2x1r1yd9gf","posts":[]},{"name":"日志","_id":"00qifxv5mj8eflur","posts":[]},{"name":"cocos2dx","_id":"xjzi3y5kgxiy0em6","posts":[]},{"name":"技术","_id":"d1uwqwu3ohhwtaww","posts":[]},{"name":"影评","_id":"bl88t0ee3xen505g","posts":[]},{"name":"angularjs","_id":"zg2ebll2vb1jw72p","posts":["argcc0bs1dalxjc7","rduhf4qrow0a8w2d","beif44ckfybzx5as","u0e53noywq91xasg","iwoc0smr7voxzrgy","jjkoetx4cq6n5s2t"]},{"name":"directive","_id":"oblo0hbf2620lwuw","posts":["argcc0bs1dalxjc7","jjkoetx4cq6n5s2t"]},{"name":"前端","_id":"8p6a4n43ng1rxakg","posts":["argcc0bs1dalxjc7","rduhf4qrow0a8w2d","beif44ckfybzx5as","u0e53noywq91xasg","iwoc0smr7voxzrgy"]},{"name":"protractor","_id":"9ldjrzbl9cx1tmha","posts":[]},{"name":"单元测试","_id":"b84rky0pq4206ty4","posts":[]},{"name":"form","_id":"xwn3tjfhj0xhku2b","posts":["iwoc0smr7voxzrgy"]},{"name":"webpack","_id":"0fn1yk02v4z46syh","posts":["wvnm55wz4ewz330q"]},{"name":"demo","_id":"0plm3ry08ucl03k0","posts":[]},{"name":"mvvm","_id":"9vwcw2spf32jigy7","posts":[]},{"name":"js","_id":"nh17cyzza93zrvtd","posts":["jjkoetx4cq6n5s2t"]},{"name":"前端工程化","_id":"618uovi85dexjj9q","posts":["wvnm55wz4ewz330q"]}]}